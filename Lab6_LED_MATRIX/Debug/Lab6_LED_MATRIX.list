
Lab6_LED_MATRIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f68  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002100  08002100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002110  08002110  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002118  08002118  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002118  08002118  00012118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08002120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  200000ac  080021cc  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080021cc  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ccb  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ebf  00000000  00000000  00023da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00024c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000388  00000000  00000000  00025078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014318  00000000  00000000  00025400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005273  00000000  00000000  00039718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ef5c  00000000  00000000  0003e98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd8e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e9c  00000000  00000000  000bd938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000ac 	.word	0x200000ac
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080020e8 	.word	0x080020e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b0 	.word	0x200000b0
 80001d4:	080020e8 	.word	0x080020e8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <CLK>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CLK()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLK_GPIO, CLK_PIN, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <CLK+0x20>)
 80004e8:	f001 f954 	bl	8001794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLK_GPIO, CLK_PIN, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	4802      	ldr	r0, [pc, #8]	; (80004fc <CLK+0x20>)
 80004f4:	f001 f94e 	bl	8001794 <HAL_GPIO_WritePin>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020c00 	.word	0x40020c00

08000500 <LATCH>:

void LATCH()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LATCH_GPIO, LATCH_PIN, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <LATCH+0x20>)
 800050c:	f001 f942 	bl	8001794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO, LATCH_PIN, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <LATCH+0x20>)
 8000518:	f001 f93c 	bl	8001794 <HAL_GPIO_WritePin>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40020c00 	.word	0x40020c00

08000524 <DATA>:

void DATA(int value)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if(1==value)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d106      	bne.n	8000540 <DATA+0x1c>
	{
		HAL_GPIO_WritePin(DATA_GPIO, DATA_PIN, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <DATA+0x34>)
 800053a:	f001 f92b 	bl	8001794 <HAL_GPIO_WritePin>
 800053e:	e005      	b.n	800054c <DATA+0x28>
	}
	else
	{
		HAL_GPIO_WritePin(DATA_GPIO, DATA_PIN, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <DATA+0x34>)
 8000548:	f001 f924 	bl	8001794 <HAL_GPIO_WritePin>
	}
	CLK();
 800054c:	f7ff ffc6 	bl	80004dc <CLK>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40020c00 	.word	0x40020c00

0800055c <pushHEX>:

void pushHEX(int hexValue)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e011      	b.n	800058e <pushHEX+0x32>
		if (hexValue & 0x01) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <pushHEX+0x20>
			DATA(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff ffd5 	bl	8000524 <DATA>
 800057a:	e002      	b.n	8000582 <pushHEX+0x26>
		} else {
			DATA(0);
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ffd1 	bl	8000524 <DATA>
		}
		hexValue >>= 1;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	105b      	asrs	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2b07      	cmp	r3, #7
 8000592:	ddea      	ble.n	800056a <pushHEX+0xe>
	}
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0a2      	sub	sp, #136	; 0x88
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fdf5 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 fcbd 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fd19 	bl	8000fe4 <MX_GPIO_Init>
//			HAL_Delay(1);
//		}

	  // {\0} {\0}  {L}
	      // nhan L
	      for(int step =0; step<8;step++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80005b8:	e037      	b.n	800062a <main+0x8a>
	      {
	        for(int i = 0;i<= step;i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005c0:	e025      	b.n	800060e <main+0x6e>
	        {
	          pushHEX(colsSelect[7-step+i]);
 80005c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80005c6:	f1c3 0207 	rsb	r2, r3, #7
 80005ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005ce:	4413      	add	r3, r2
 80005d0:	4ab7      	ldr	r2, [pc, #732]	; (80008b0 <main+0x310>)
 80005d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffc0 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ffbd 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffba 	bl	800055c <pushHEX>
	          pushHEX(rowsData[2][i]);
 80005e8:	4ab2      	ldr	r2, [pc, #712]	; (80008b4 <main+0x314>)
 80005ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005ee:	3310      	adds	r3, #16
 80005f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffb1 	bl	800055c <pushHEX>
	          LATCH();
 80005fa:	f7ff ff81 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 fe3a 	bl	8001278 <HAL_Delay>
	        for(int i = 0;i<= step;i++)
 8000604:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000608:	3301      	adds	r3, #1
 800060a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800060e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000616:	429a      	cmp	r2, r3
 8000618:	ddd3      	ble.n	80005c2 <main+0x22>
	        }
	        HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fe2c 	bl	8001278 <HAL_Delay>
	      for(int step =0; step<8;step++)
 8000620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000624:	3301      	adds	r3, #1
 8000626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800062a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800062e:	2b07      	cmp	r3, #7
 8000630:	ddc3      	ble.n	80005ba <main+0x1a>
	      }
	      //==============

	      //==============
	      // {\0} {L}  {E}
	      int count = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	67fb      	str	r3, [r7, #124]	; 0x7c
	      //nhan E
	      for(int step1 =0; step1<8;step1++)
 8000636:	2300      	movs	r3, #0
 8000638:	67bb      	str	r3, [r7, #120]	; 0x78
 800063a:	e084      	b.n	8000746 <main+0x1a6>
	      {
	        for(int j = 0;j<= count;j++)
 800063c:	2300      	movs	r3, #0
 800063e:	677b      	str	r3, [r7, #116]	; 0x74
 8000640:	e020      	b.n	8000684 <main+0xe4>
	        {
	          pushHEX(colsSelect[7-step1+j]);
 8000642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000644:	f1c3 0207 	rsb	r2, r3, #7
 8000648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800064a:	4413      	add	r3, r2
 800064c:	4a98      	ldr	r2, [pc, #608]	; (80008b0 <main+0x310>)
 800064e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff82 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff ff7f 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff ff7c 	bl	800055c <pushHEX>
	          pushHEX(rowsData[1][j]);
 8000664:	4a93      	ldr	r2, [pc, #588]	; (80008b4 <main+0x314>)
 8000666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000668:	3308      	adds	r3, #8
 800066a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff74 	bl	800055c <pushHEX>
	          LATCH();
 8000674:	f7ff ff44 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fdfd 	bl	8001278 <HAL_Delay>
	        for(int j = 0;j<= count;j++)
 800067e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000680:	3301      	adds	r3, #1
 8000682:	677b      	str	r3, [r7, #116]	; 0x74
 8000684:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000688:	429a      	cmp	r2, r3
 800068a:	ddda      	ble.n	8000642 <main+0xa2>
	        }
	        // Day L
	        for(int i = 0; i < (7-step1); i++)
 800068c:	2300      	movs	r3, #0
 800068e:	673b      	str	r3, [r7, #112]	; 0x70
 8000690:	e022      	b.n	80006d8 <main+0x138>
	        {
	          pushHEX(colsSelect[6-i-step1]);
 8000692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000694:	f1c3 0206 	rsb	r2, r3, #6
 8000698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a84      	ldr	r2, [pc, #528]	; (80008b0 <main+0x310>)
 800069e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff5a 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff57 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ff54 	bl	800055c <pushHEX>
	          pushHEX(rowsData[2][7-i]);
 80006b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	4a7e      	ldr	r2, [pc, #504]	; (80008b4 <main+0x314>)
 80006bc:	3310      	adds	r3, #16
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff4a 	bl	800055c <pushHEX>
	          LATCH();
 80006c8:	f7ff ff1a 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 fdd3 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step1); i++)
 80006d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006d4:	3301      	adds	r3, #1
 80006d6:	673b      	str	r3, [r7, #112]	; 0x70
 80006d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbd6      	blt.n	8000692 <main+0xf2>
	        }
	        // Nhan L
	        for(int a = 0;a<= count;a++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80006e8:	e020      	b.n	800072c <main+0x18c>
	        {
	          pushHEX(0x00);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff ff36 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step1+a]);
 80006f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006f2:	f1c3 0207 	rsb	r2, r3, #7
 80006f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006f8:	4413      	add	r3, r2
 80006fa:	4a6d      	ldr	r2, [pc, #436]	; (80008b0 <main+0x310>)
 80006fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff2b 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff28 	bl	800055c <pushHEX>
	          pushHEX(rowsData[2][a]);
 800070c:	4a69      	ldr	r2, [pc, #420]	; (80008b4 <main+0x314>)
 800070e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000710:	3310      	adds	r3, #16
 8000712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff20 	bl	800055c <pushHEX>
	          LATCH();
 800071c:	f7ff fef0 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f000 fda9 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 8000726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000728:	3301      	adds	r3, #1
 800072a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800072c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800072e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000730:	429a      	cmp	r2, r3
 8000732:	ddda      	ble.n	80006ea <main+0x14a>
	        }
	        count++;
 8000734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000736:	3301      	adds	r3, #1
 8000738:	67fb      	str	r3, [r7, #124]	; 0x7c
	        HAL_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 fd9c 	bl	8001278 <HAL_Delay>
	      for(int step1 =0; step1<8;step1++)
 8000740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000742:	3301      	adds	r3, #1
 8000744:	67bb      	str	r3, [r7, #120]	; 0x78
 8000746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000748:	2b07      	cmp	r3, #7
 800074a:	f77f af77 	ble.w	800063c <main+0x9c>
	      }
	      //==============

	      //==============
	      // {L}2  {E}1  {N}3
	      count = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	67fb      	str	r3, [r7, #124]	; 0x7c
	      // Nhan N
	      for(int step2 =0; step2<8;step2++)
 8000752:	2300      	movs	r3, #0
 8000754:	66bb      	str	r3, [r7, #104]	; 0x68
 8000756:	e0dd      	b.n	8000914 <main+0x374>
	      {
	        for(int j = 0;j<= count;j++)
 8000758:	2300      	movs	r3, #0
 800075a:	667b      	str	r3, [r7, #100]	; 0x64
 800075c:	e020      	b.n	80007a0 <main+0x200>
	        {
	          pushHEX(colsSelect[7-step2+j]);
 800075e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000760:	f1c3 0207 	rsb	r2, r3, #7
 8000764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000766:	4413      	add	r3, r2
 8000768:	4a51      	ldr	r2, [pc, #324]	; (80008b0 <main+0x310>)
 800076a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fef4 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fef1 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff feee 	bl	800055c <pushHEX>
	          pushHEX(rowsData[3][j]);
 8000780:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <main+0x314>)
 8000782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000784:	3318      	adds	r3, #24
 8000786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fee6 	bl	800055c <pushHEX>
	          LATCH();
 8000790:	f7ff feb6 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fd6f 	bl	8001278 <HAL_Delay>
	        for(int j = 0;j<= count;j++)
 800079a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800079c:	3301      	adds	r3, #1
 800079e:	667b      	str	r3, [r7, #100]	; 0x64
 80007a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007a4:	429a      	cmp	r2, r3
 80007a6:	ddda      	ble.n	800075e <main+0x1be>
	        }
	        // Day E
	        for(int i = 0; i < (7-step2); i++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	663b      	str	r3, [r7, #96]	; 0x60
 80007ac:	e022      	b.n	80007f4 <main+0x254>
	        {
	          pushHEX(colsSelect[6-i-step2]);
 80007ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007b0:	f1c3 0206 	rsb	r2, r3, #6
 80007b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <main+0x310>)
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fecc 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fec9 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fec6 	bl	800055c <pushHEX>
	          pushHEX(rowsData[1][7-i]);
 80007d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	4a37      	ldr	r2, [pc, #220]	; (80008b4 <main+0x314>)
 80007d8:	3308      	adds	r3, #8
 80007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff febc 	bl	800055c <pushHEX>
	          LATCH();
 80007e4:	f7ff fe8c 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 fd45 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 80007ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007f0:	3301      	adds	r3, #1
 80007f2:	663b      	str	r3, [r7, #96]	; 0x60
 80007f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dbd6      	blt.n	80007ae <main+0x20e>
	        }
	        //Nhan E
	        for(int a = 0;a<= count;a++)
 8000800:	2300      	movs	r3, #0
 8000802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000804:	e020      	b.n	8000848 <main+0x2a8>
	        {
	          pushHEX(0x00);
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff fea8 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step2+a]);
 800080c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800080e:	f1c3 0207 	rsb	r2, r3, #7
 8000812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000814:	4413      	add	r3, r2
 8000816:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <main+0x310>)
 8000818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fe9d 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fe9a 	bl	800055c <pushHEX>
	          pushHEX(rowsData[1][a]);
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <main+0x314>)
 800082a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800082c:	3308      	adds	r3, #8
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fe92 	bl	800055c <pushHEX>
	          LATCH();
 8000838:	f7ff fe62 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f000 fd1b 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 8000842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000844:	3301      	adds	r3, #1
 8000846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800084a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800084c:	429a      	cmp	r2, r3
 800084e:	ddda      	ble.n	8000806 <main+0x266>
	        }
	        // Day L
	        for(int i = 0; i < (7-step2); i++)
 8000850:	2300      	movs	r3, #0
 8000852:	65bb      	str	r3, [r7, #88]	; 0x58
 8000854:	e022      	b.n	800089c <main+0x2fc>
	        {
	          pushHEX(0x00);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fe80 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[6-i-step2]);
 800085c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800085e:	f1c3 0206 	rsb	r2, r3, #6
 8000862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <main+0x310>)
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe75 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fe72 	bl	800055c <pushHEX>
	          pushHEX(rowsData[2][7-i]);
 8000878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <main+0x314>)
 8000880:	3310      	adds	r3, #16
 8000882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe68 	bl	800055c <pushHEX>
	          LATCH();
 800088c:	f7ff fe38 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 fcf1 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000898:	3301      	adds	r3, #1
 800089a:	65bb      	str	r3, [r7, #88]	; 0x58
 800089c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbd6      	blt.n	8000856 <main+0x2b6>
	        }
	        // Nhan L
	        for(int a = 0;a<= count;a++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	657b      	str	r3, [r7, #84]	; 0x54
 80008ac:	e025      	b.n	80008fa <main+0x35a>
 80008ae:	bf00      	nop
 80008b0:	20000080 	.word	0x20000080
 80008b4:	20000000 	.word	0x20000000
	        {
	          pushHEX(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fe4f 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fe4c 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step2+a]);
 80008c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008c6:	f1c3 0207 	rsb	r2, r3, #7
 80008ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008cc:	4413      	add	r3, r2
 80008ce:	4aad      	ldr	r2, [pc, #692]	; (8000b84 <main+0x5e4>)
 80008d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe41 	bl	800055c <pushHEX>
	          pushHEX(rowsData[2][a]);
 80008da:	4aab      	ldr	r2, [pc, #684]	; (8000b88 <main+0x5e8>)
 80008dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008de:	3310      	adds	r3, #16
 80008e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe39 	bl	800055c <pushHEX>
	          LATCH();
 80008ea:	f7ff fe09 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fcc2 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 80008f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008f6:	3301      	adds	r3, #1
 80008f8:	657b      	str	r3, [r7, #84]	; 0x54
 80008fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80008fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008fe:	429a      	cmp	r2, r3
 8000900:	ddda      	ble.n	80008b8 <main+0x318>
	        }
	        count++;
 8000902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000904:	3301      	adds	r3, #1
 8000906:	67fb      	str	r3, [r7, #124]	; 0x7c
	        HAL_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fcb5 	bl	8001278 <HAL_Delay>
	      for(int step2 =0; step2<8;step2++)
 800090e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000910:	3301      	adds	r3, #1
 8000912:	66bb      	str	r3, [r7, #104]	; 0x68
 8000914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000916:	2b07      	cmp	r3, #7
 8000918:	f77f af1e 	ble.w	8000758 <main+0x1b8>
	      }
	      //==============
	      //==============
	      // 2  {E}1  {N}3  {0}
	      count = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	67fb      	str	r3, [r7, #124]	; 0x7c

	      for(int step2 =0; step2<8;step2++)
 8000920:	2300      	movs	r3, #0
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
 8000924:	e0ff      	b.n	8000b26 <main+0x586>
	      {
	        //Nhan Rong
	        for(int j = 0;j<= count;j++)
 8000926:	2300      	movs	r3, #0
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800092a:	e01b      	b.n	8000964 <main+0x3c4>
	        {
	          pushHEX(colsSelect[7-step2+j]);
 800092c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800092e:	f1c3 0207 	rsb	r2, r3, #7
 8000932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000934:	4413      	add	r3, r2
 8000936:	4a93      	ldr	r2, [pc, #588]	; (8000b84 <main+0x5e4>)
 8000938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe0d 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fe0a 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fe07 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 800094e:	20ff      	movs	r0, #255	; 0xff
 8000950:	f7ff fe04 	bl	800055c <pushHEX>
	          LATCH();
 8000954:	f7ff fdd4 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 fc8d 	bl	8001278 <HAL_Delay>
	        for(int j = 0;j<= count;j++)
 800095e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000960:	3301      	adds	r3, #1
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000968:	429a      	cmp	r2, r3
 800096a:	dddf      	ble.n	800092c <main+0x38c>
	        }
	        // Day N
	        for(int i = 0; i < (7-step2); i++)
 800096c:	2300      	movs	r3, #0
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000970:	e022      	b.n	80009b8 <main+0x418>
	        {
	          pushHEX(colsSelect[6-i-step2]);
 8000972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000974:	f1c3 0206 	rsb	r2, r3, #6
 8000978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	4a81      	ldr	r2, [pc, #516]	; (8000b84 <main+0x5e4>)
 800097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fdea 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fde7 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fde4 	bl	800055c <pushHEX>
	          pushHEX(rowsData[3][7-i]);
 8000994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	4a7b      	ldr	r2, [pc, #492]	; (8000b88 <main+0x5e8>)
 800099c:	3318      	adds	r3, #24
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fdda 	bl	800055c <pushHEX>
	          LATCH();
 80009a8:	f7ff fdaa 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 fc63 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 80009b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009b4:	3301      	adds	r3, #1
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80009b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbd6      	blt.n	8000972 <main+0x3d2>
	        }
	        // Nhan N
	        for(int a = 0;a<= count;a++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
 80009c8:	e020      	b.n	8000a0c <main+0x46c>
	        {
	          pushHEX(0x00);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fdc6 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step2+a]);
 80009d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d2:	f1c3 0207 	rsb	r2, r3, #7
 80009d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d8:	4413      	add	r3, r2
 80009da:	4a6a      	ldr	r2, [pc, #424]	; (8000b84 <main+0x5e4>)
 80009dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fdbb 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff fdb8 	bl	800055c <pushHEX>
	          pushHEX(rowsData[3][a]);
 80009ec:	4a66      	ldr	r2, [pc, #408]	; (8000b88 <main+0x5e8>)
 80009ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009f0:	3318      	adds	r3, #24
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fdb0 	bl	800055c <pushHEX>
	          LATCH();
 80009fc:	f7ff fd80 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f000 fc39 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 8000a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a08:	3301      	adds	r3, #1
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8000a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a10:	429a      	cmp	r2, r3
 8000a12:	ddda      	ble.n	80009ca <main+0x42a>
	        }
	        // Day E
	        for(int i = 0; i < (7-step2); i++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
 8000a18:	e022      	b.n	8000a60 <main+0x4c0>
	        {
	          pushHEX(0x00);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fd9e 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[6-i-step2]);
 8000a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a22:	f1c3 0206 	rsb	r2, r3, #6
 8000a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	4a56      	ldr	r2, [pc, #344]	; (8000b84 <main+0x5e4>)
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fd93 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fd90 	bl	800055c <pushHEX>
	          pushHEX(rowsData[1][7-i]);
 8000a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	4a51      	ldr	r2, [pc, #324]	; (8000b88 <main+0x5e8>)
 8000a44:	3308      	adds	r3, #8
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fd86 	bl	800055c <pushHEX>
	          LATCH();
 8000a50:	f7ff fd56 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 fc0f 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8000a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbd6      	blt.n	8000a1a <main+0x47a>
	        }
	        // Nhan E
	        for(int a = 0;a<= count;a++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a70:	e020      	b.n	8000ab4 <main+0x514>
	        {
	          pushHEX(0x00);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fd72 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fd6f 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step2+a]);
 8000a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a80:	f1c3 0207 	rsb	r2, r3, #7
 8000a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a86:	4413      	add	r3, r2
 8000a88:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <main+0x5e4>)
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd64 	bl	800055c <pushHEX>
	          pushHEX(rowsData[1][a]);
 8000a94:	4a3c      	ldr	r2, [pc, #240]	; (8000b88 <main+0x5e8>)
 8000a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a98:	3308      	adds	r3, #8
 8000a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd5c 	bl	800055c <pushHEX>
	          LATCH();
 8000aa4:	f7ff fd2c 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 fbe5 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 8000aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	ddda      	ble.n	8000a72 <main+0x4d2>
	        }
	        // Day L
	        for(int i = 0; i < (7-step2); i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ac0:	e022      	b.n	8000b08 <main+0x568>
	        {
	          pushHEX(0x00);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fd4a 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff fd47 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[6-i-step2]);
 8000ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad0:	f1c3 0206 	rsb	r2, r3, #6
 8000ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <main+0x5e4>)
 8000ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd3c 	bl	800055c <pushHEX>
	          pushHEX(rowsData[2][7-i]);
 8000ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <main+0x5e8>)
 8000aec:	3310      	adds	r3, #16
 8000aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fd32 	bl	800055c <pushHEX>
	          LATCH();
 8000af8:	f7ff fd02 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 fbbb 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b04:	3301      	adds	r3, #1
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbd6      	blt.n	8000ac2 <main+0x522>
	        }
	        count++;
 8000b14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b16:	3301      	adds	r3, #1
 8000b18:	67fb      	str	r3, [r7, #124]	; 0x7c
	        HAL_Delay(1);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 fbac 	bl	8001278 <HAL_Delay>
	      for(int step2 =0; step2<8;step2++)
 8000b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b22:	3301      	adds	r3, #1
 8000b24:	653b      	str	r3, [r7, #80]	; 0x50
 8000b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	f77f aefc 	ble.w	8000926 <main+0x386>
	      }
	      //==============
	      //==============
	      // 1  {N}3  {0}  {0}
	      count = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	67fb      	str	r3, [r7, #124]	; 0x7c
	      for(int step2 =0; step2<8;step2++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
 8000b36:	e0f7      	b.n	8000d28 <main+0x788>
	      {
	        //Nhan Rong
	        for(int j = 0;j<= count;j++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b3c:	e01b      	b.n	8000b76 <main+0x5d6>
	        {
	          pushHEX(colsSelect[7-step2+j]);
 8000b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b40:	f1c3 0207 	rsb	r2, r3, #7
 8000b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b46:	4413      	add	r3, r2
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <main+0x5e4>)
 8000b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd04 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff fd01 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff fcfe 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 8000b60:	20ff      	movs	r0, #255	; 0xff
 8000b62:	f7ff fcfb 	bl	800055c <pushHEX>
	          LATCH();
 8000b66:	f7ff fccb 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fb84 	bl	8001278 <HAL_Delay>
	        for(int j = 0;j<= count;j++)
 8000b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b72:	3301      	adds	r3, #1
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
 8000b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dddf      	ble.n	8000b3e <main+0x59e>
	        }
	        // Day Rong
	        for(int i = 0; i < (7-step2); i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b82:	e01f      	b.n	8000bc4 <main+0x624>
 8000b84:	20000080 	.word	0x20000080
 8000b88:	20000000 	.word	0x20000000
	        {
	          pushHEX(colsSelect[6-i-step2]);
 8000b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8e:	f1c3 0206 	rsb	r2, r3, #6
 8000b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	4ab2      	ldr	r2, [pc, #712]	; (8000e60 <main+0x8c0>)
 8000b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fcdd 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fcda 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fcd7 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 8000bae:	20ff      	movs	r0, #255	; 0xff
 8000bb0:	f7ff fcd4 	bl	800055c <pushHEX>
	          LATCH();
 8000bb4:	f7ff fca4 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 fb5d 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbdd      	blt.n	8000b8c <main+0x5ec>
	        }
	        // Nhan Rong
	        for(int a = 0;a<= count;a++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bd4:	e01b      	b.n	8000c0e <main+0x66e>
	        {
	          pushHEX(0x00);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fcc0 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step2+a]);
 8000bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bde:	f1c3 0207 	rsb	r2, r3, #7
 8000be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be4:	4413      	add	r3, r2
 8000be6:	4a9e      	ldr	r2, [pc, #632]	; (8000e60 <main+0x8c0>)
 8000be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fcb5 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fcb2 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 8000bf8:	20ff      	movs	r0, #255	; 0xff
 8000bfa:	f7ff fcaf 	bl	800055c <pushHEX>
	          LATCH();
 8000bfe:	f7ff fc7f 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fb38 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dddf      	ble.n	8000bd6 <main+0x636>
	        }
	        // Day N
	        for(int i = 0; i < (7-step2); i++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1a:	e022      	b.n	8000c62 <main+0x6c2>
	        {
	          pushHEX(0x00);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fc9d 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[6-i-step2]);
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	f1c3 0206 	rsb	r2, r3, #6
 8000c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	4a8c      	ldr	r2, [pc, #560]	; (8000e60 <main+0x8c0>)
 8000c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fc92 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fc8f 	bl	800055c <pushHEX>
	          pushHEX(rowsData[3][7-i]);
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	f1c3 0307 	rsb	r3, r3, #7
 8000c44:	4a87      	ldr	r2, [pc, #540]	; (8000e64 <main+0x8c4>)
 8000c46:	3318      	adds	r3, #24
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fc85 	bl	800055c <pushHEX>
	          LATCH();
 8000c52:	f7ff fc55 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fb0e 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	3301      	adds	r3, #1
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
 8000c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c64:	f1c3 0307 	rsb	r3, r3, #7
 8000c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbd6      	blt.n	8000c1c <main+0x67c>
	        }
	        // Nhan N
	        for(int a = 0;a<= count;a++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
 8000c72:	e020      	b.n	8000cb6 <main+0x716>
	        {
	          pushHEX(0x00);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fc71 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fc6e 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step2+a]);
 8000c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c82:	f1c3 0207 	rsb	r2, r3, #7
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a75      	ldr	r2, [pc, #468]	; (8000e60 <main+0x8c0>)
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc63 	bl	800055c <pushHEX>
	          pushHEX(rowsData[3][a]);
 8000c96:	4a73      	ldr	r2, [pc, #460]	; (8000e64 <main+0x8c4>)
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	3318      	adds	r3, #24
 8000c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fc5b 	bl	800055c <pushHEX>
	          LATCH();
 8000ca6:	f7ff fc2b 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 fae4 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	623b      	str	r3, [r7, #32]
 8000cb6:	6a3a      	ldr	r2, [r7, #32]
 8000cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	ddda      	ble.n	8000c74 <main+0x6d4>
	        }
	        // Day E
	        for(int i = 0; i < (7-step2); i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	e022      	b.n	8000d0a <main+0x76a>
	        {
	          pushHEX(0x00);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fc49 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fc46 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[6-i-step2]);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0206 	rsb	r2, r3, #6
 8000cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	4a61      	ldr	r2, [pc, #388]	; (8000e60 <main+0x8c0>)
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fc3b 	bl	800055c <pushHEX>
	          pushHEX(rowsData[1][7-i]);
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f1c3 0307 	rsb	r3, r3, #7
 8000cec:	4a5d      	ldr	r2, [pc, #372]	; (8000e64 <main+0x8c4>)
 8000cee:	3308      	adds	r3, #8
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fc31 	bl	800055c <pushHEX>
	          LATCH();
 8000cfa:	f7ff fc01 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f000 faba 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	3301      	adds	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0c:	f1c3 0307 	rsb	r3, r3, #7
 8000d10:	69fa      	ldr	r2, [r7, #28]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbd6      	blt.n	8000cc4 <main+0x724>
	        }
	        count++;
 8000d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d18:	3301      	adds	r3, #1
 8000d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
	        HAL_Delay(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f000 faab 	bl	8001278 <HAL_Delay>
	      for(int step2 =0; step2<8;step2++)
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	3301      	adds	r3, #1
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
 8000d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2a:	2b07      	cmp	r3, #7
 8000d2c:	f77f af04 	ble.w	8000b38 <main+0x598>
	      }
	      //==============
	      //==============
	      // 3  {0}  {0} {0}
	      count = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	67fb      	str	r3, [r7, #124]	; 0x7c
	      for(int step2 =0; step2<8;step2++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	e0eb      	b.n	8000f12 <main+0x972>
	      {
	        //Nhan Rong
	        for(int j = 0;j<= count;j++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e01b      	b.n	8000d78 <main+0x7d8>
	        {
	          pushHEX(colsSelect[7-step2+j]);
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	f1c3 0207 	rsb	r2, r3, #7
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a45      	ldr	r2, [pc, #276]	; (8000e60 <main+0x8c0>)
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fc03 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fc00 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fbfd 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 8000d62:	20ff      	movs	r0, #255	; 0xff
 8000d64:	f7ff fbfa 	bl	800055c <pushHEX>
	          LATCH();
 8000d68:	f7ff fbca 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f000 fa83 	bl	8001278 <HAL_Delay>
	        for(int j = 0;j<= count;j++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dddf      	ble.n	8000d40 <main+0x7a0>
	        }
	        // Day Rong
	        for(int i = 0; i < (7-step2); i++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	e01b      	b.n	8000dbe <main+0x81e>
	        {
	          pushHEX(colsSelect[6-i-step2]);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	f1c3 0206 	rsb	r2, r3, #6
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <main+0x8c0>)
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fbe0 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fbdd 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fbda 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 8000da8:	20ff      	movs	r0, #255	; 0xff
 8000daa:	f7ff fbd7 	bl	800055c <pushHEX>
	          LATCH();
 8000dae:	f7ff fba7 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 fa60 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	f1c3 0307 	rsb	r3, r3, #7
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dbdd      	blt.n	8000d86 <main+0x7e6>
	        }
	        // Nhan Rong
	        for(int a = 0;a<= count;a++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e01b      	b.n	8000e08 <main+0x868>
	        {
	          pushHEX(0x00);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fbc3 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step2+a]);
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	f1c3 0207 	rsb	r2, r3, #7
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <main+0x8c0>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fbb8 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fbb5 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 8000df2:	20ff      	movs	r0, #255	; 0xff
 8000df4:	f7ff fbb2 	bl	800055c <pushHEX>
	          LATCH();
 8000df8:	f7ff fb82 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f000 fa3b 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dddf      	ble.n	8000dd0 <main+0x830>
	        }
	        // Day Rong
	        for(int i = 0; i < (7-step2); i++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	e01b      	b.n	8000e4e <main+0x8ae>
	        {
	          pushHEX(0x00);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fba0 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[6-i-step2]);
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f1c3 0206 	rsb	r2, r3, #6
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <main+0x8c0>)
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb95 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fb92 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 8000e38:	20ff      	movs	r0, #255	; 0xff
 8000e3a:	f7ff fb8f 	bl	800055c <pushHEX>
	          LATCH();
 8000e3e:	f7ff fb5f 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 fa18 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	f1c3 0307 	rsb	r3, r3, #7
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	dbdd      	blt.n	8000e16 <main+0x876>
	        }
	        // nhan Rong
	        for(int a = 0;a<= count;a++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e01f      	b.n	8000ea0 <main+0x900>
 8000e60:	20000080 	.word	0x20000080
 8000e64:	20000000 	.word	0x20000000
	        {
	          pushHEX(0x00);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fb77 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fb74 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[7-step2+a]);
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	f1c3 0207 	rsb	r2, r3, #7
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <main+0x980>)
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fb69 	bl	800055c <pushHEX>
	          pushHEX(0xFF);
 8000e8a:	20ff      	movs	r0, #255	; 0xff
 8000e8c:	f7ff fb66 	bl	800055c <pushHEX>
	          LATCH();
 8000e90:	f7ff fb36 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f000 f9ef 	bl	8001278 <HAL_Delay>
	        for(int a = 0;a<= count;a++)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dddf      	ble.n	8000e68 <main+0x8c8>
	        }
	        // Day N
	        for(int i = 0; i < (7-step2); i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	e022      	b.n	8000ef4 <main+0x954>
	        {
	          pushHEX(0x00);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fb54 	bl	800055c <pushHEX>
	          pushHEX(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fb51 	bl	800055c <pushHEX>
	          pushHEX(colsSelect[6-i-step2]);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	f1c3 0206 	rsb	r2, r3, #6
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <main+0x980>)
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb46 	bl	800055c <pushHEX>
	          pushHEX(rowsData[3][7-i]);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <main+0x984>)
 8000ed8:	3318      	adds	r3, #24
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fb3c 	bl	800055c <pushHEX>
	          LATCH();
 8000ee4:	f7ff fb0c 	bl	8000500 <LATCH>
	          HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 f9c5 	bl	8001278 <HAL_Delay>
	        for(int i = 0; i < (7-step2); i++)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dbd6      	blt.n	8000eae <main+0x90e>
	        }
	        count++;
 8000f00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f02:	3301      	adds	r3, #1
 8000f04:	67fb      	str	r3, [r7, #124]	; 0x7c
	        HAL_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 f9b6 	bl	8001278 <HAL_Delay>
	      for(int step2 =0; step2<8;step2++)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	2b07      	cmp	r3, #7
 8000f16:	f77f af10 	ble.w	8000d3a <main+0x79a>
  {
 8000f1a:	f7ff bb4a 	b.w	80005b2 <main+0x12>
 8000f1e:	bf00      	nop
 8000f20:	20000080 	.word	0x20000080
 8000f24:	20000000 	.word	0x20000000

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f8ce 	bl	80020d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <SystemClock_Config+0xb4>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <SystemClock_Config+0xb4>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <SystemClock_Config+0xb4>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <SystemClock_Config+0xb8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <SystemClock_Config+0xb8>)
 8000f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <SystemClock_Config+0xb8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fc15 	bl	80017c8 <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fa4:	f000 f862 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa8:	230f      	movs	r3, #15
 8000faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fe77 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000fd0:	f000 f84c 	bl	800106c <Error_Handler>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	3750      	adds	r7, #80	; 0x50
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40007000 	.word	0x40007000

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_GPIO_Init+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <MX_GPIO_Init+0x80>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_GPIO_Init+0x80>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_GPIO_Init+0x80>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <MX_GPIO_Init+0x80>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_GPIO_Init+0x80>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <MX_GPIO_Init+0x84>)
 800103a:	f000 fbab 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800103e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_GPIO_Init+0x84>)
 8001058:	f000 fa18 	bl	800148c <HAL_GPIO_Init>

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020c00 	.word	0x40020c00

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f890 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopFillZerobss+0x26>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116a:	f7ff ffd7 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f000 ff8f 	bl	8002090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fa15 	bl	80005a0 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001184:	08002120 	.word	0x08002120
  ldr r2, =_sbss
 8001188:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800118c:	200000cc 	.word	0x200000cc

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f931 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff ff56 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f93b 	bl	8001472 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f911 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200000a0 	.word	0x200000a0
 8001230:	200000a8 	.word	0x200000a8
 8001234:	200000a4 	.word	0x200000a4

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200000a8 	.word	0x200000a8
 800125c:	200000c8 	.word	0x200000c8

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200000c8 	.word	0x200000c8

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000a8 	.word	0x200000a8

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff47 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff5c 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffb0 	bl	80013e0 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e159      	b.n	800175c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f040 8148 	bne.w	8001756 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d005      	beq.n	80014de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d130      	bne.n	8001540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b03      	cmp	r3, #3
 800154a:	d017      	beq.n	800157c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d123      	bne.n	80015d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a2 	beq.w	8001756 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_GPIO_Init+0x2e8>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a56      	ldr	r2, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x2e8>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b54      	ldr	r3, [pc, #336]	; (8001774 <HAL_GPIO_Init+0x2e8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162e:	4a52      	ldr	r2, [pc, #328]	; (8001778 <HAL_GPIO_Init+0x2ec>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a49      	ldr	r2, [pc, #292]	; (800177c <HAL_GPIO_Init+0x2f0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x202>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a48      	ldr	r2, [pc, #288]	; (8001780 <HAL_GPIO_Init+0x2f4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x1fe>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_GPIO_Init+0x2f8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x1fa>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a46      	ldr	r2, [pc, #280]	; (8001788 <HAL_GPIO_Init+0x2fc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x1f6>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_GPIO_Init+0x300>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x1f2>
 800167a:	2304      	movs	r3, #4
 800167c:	e008      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800167e:	2307      	movs	r3, #7
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x204>
 8001682:	2303      	movs	r3, #3
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x204>
 8001686:	2302      	movs	r3, #2
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800168e:	2300      	movs	r3, #0
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f002 0203 	and.w	r2, r2, #3
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a0:	4935      	ldr	r1, [pc, #212]	; (8001778 <HAL_GPIO_Init+0x2ec>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_GPIO_Init+0x304>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d2:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_GPIO_Init+0x304>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_GPIO_Init+0x304>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016fc:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_GPIO_Init+0x304>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_GPIO_Init+0x304>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001726:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <HAL_GPIO_Init+0x304>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_GPIO_Init+0x304>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001750:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_GPIO_Init+0x304>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3301      	adds	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2b0f      	cmp	r3, #15
 8001760:	f67f aea2 	bls.w	80014a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400
 8001784:	40020800 	.word	0x40020800
 8001788:	40020c00 	.word	0x40020c00
 800178c:	40021000 	.word	0x40021000
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e267      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d075      	beq.n	80018d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017e6:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d00c      	beq.n	800180c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d112      	bne.n	8001824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fe:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180a:	d10b      	bne.n	8001824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	4b7e      	ldr	r3, [pc, #504]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05b      	beq.n	80018d0 <HAL_RCC_OscConfig+0x108>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d157      	bne.n	80018d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e242      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d106      	bne.n	800183c <HAL_RCC_OscConfig+0x74>
 800182e:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a75      	ldr	r2, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xb0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x98>
 8001846:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6f      	ldr	r2, [pc, #444]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6c      	ldr	r2, [pc, #432]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xb0>
 8001860:	4b69      	ldr	r3, [pc, #420]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a68      	ldr	r2, [pc, #416]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fcee 	bl	8001260 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fcea 	bl	8001260 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e207      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xc0>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fcda 	bl	8001260 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fcd6 	bl	8001260 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1f3      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0xe8>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d063      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018de:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x152>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1c7      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4937      	ldr	r1, [pc, #220]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e03a      	b.n	80019a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x244>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fc8f 	bl	8001260 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fc8b 	bl	8001260 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1a8      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4925      	ldr	r1, [pc, #148]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x244>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fc6e 	bl	8001260 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff fc6a 	bl	8001260 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e187      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d036      	beq.n	8001a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d016      	beq.n	80019e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_RCC_OscConfig+0x248>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc4e 	bl	8001260 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff fc4a 	bl	8001260 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e167      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80019dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x200>
 80019e6:	e01b      	b.n	8001a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_OscConfig+0x248>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fc37 	bl	8001260 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	e00e      	b.n	8001a14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff fc33 	bl	8001260 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d907      	bls.n	8001a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e150      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	42470000 	.word	0x42470000
 8001a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a14:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1ea      	bne.n	80019f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8097 	beq.w	8001b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a32:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10f      	bne.n	8001a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b7d      	ldr	r3, [pc, #500]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a7c      	ldr	r2, [pc, #496]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b7a      	ldr	r3, [pc, #488]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b74      	ldr	r3, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a73      	ldr	r2, [pc, #460]	; (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbf3 	bl	8001260 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fbef 	bl	8001260 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e10c      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2ea>
 8001aa4:	4b64      	ldr	r3, [pc, #400]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a63      	ldr	r2, [pc, #396]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x324>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x30c>
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	4a5e      	ldr	r2, [pc, #376]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a5b      	ldr	r2, [pc, #364]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0x324>
 8001ad4:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	f023 0304 	bic.w	r3, r3, #4
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d015      	beq.n	8001b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff fbb4 	bl	8001260 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff fbb0 	bl	8001260 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0cb      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0ee      	beq.n	8001afc <HAL_RCC_OscConfig+0x334>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fb9e 	bl	8001260 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7ff fb9a 	bl	8001260 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0b5      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ee      	bne.n	8001b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a38      	ldr	r2, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a1 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b66:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d05c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d141      	bne.n	8001bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fb6e 	bl	8001260 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fb6a 	bl	8001260 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e087      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	019b      	lsls	r3, r3, #6
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	491b      	ldr	r1, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb43 	bl	8001260 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fb3f 	bl	8001260 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e05c      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x416>
 8001bfc:	e054      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb2c 	bl	8001260 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff fb28 	bl	8001260 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e045      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x444>
 8001c2a:	e03d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e038      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4ec>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d028      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d121      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d11a      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c74:	4013      	ands	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d111      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0cc      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d90c      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	494d      	ldr	r1, [pc, #308]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d044      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d119      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e067      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4934      	ldr	r1, [pc, #208]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff fa5a 	bl	8001260 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff fa56 	bl	8001260 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e04f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d20c      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e032      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	490e      	ldr	r1, [pc, #56]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 f821 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	490a      	ldr	r1, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	5ccb      	ldrb	r3, [r1, r3]
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f9ba 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08002100 	.word	0x08002100
 8001e7c:	200000a0 	.word	0x200000a0
 8001e80:	200000a4 	.word	0x200000a4

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e88:	b094      	sub	sp, #80	; 0x50
 8001e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e90:	2300      	movs	r3, #0
 8001e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e94:	2300      	movs	r3, #0
 8001e96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9c:	4b79      	ldr	r3, [pc, #484]	; (8002084 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	f200 80e1 	bhi.w	8002070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8001eb6:	e0db      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b73      	ldr	r3, [pc, #460]	; (8002088 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ebc:	e0db      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ec2:	e0d8      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec4:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ece:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d063      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <HAL_RCC_GetSysClockFreq+0x200>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
 8001eee:	2300      	movs	r3, #0
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ef6:	4622      	mov	r2, r4
 8001ef8:	462b      	mov	r3, r5
 8001efa:	f04f 0000 	mov.w	r0, #0
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	0159      	lsls	r1, r3, #5
 8001f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f08:	0150      	lsls	r0, r2, #5
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4621      	mov	r1, r4
 8001f10:	1a51      	subs	r1, r2, r1
 8001f12:	6139      	str	r1, [r7, #16]
 8001f14:	4629      	mov	r1, r5
 8001f16:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f28:	4659      	mov	r1, fp
 8001f2a:	018b      	lsls	r3, r1, #6
 8001f2c:	4651      	mov	r1, sl
 8001f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f32:	4651      	mov	r1, sl
 8001f34:	018a      	lsls	r2, r1, #6
 8001f36:	4651      	mov	r1, sl
 8001f38:	ebb2 0801 	subs.w	r8, r2, r1
 8001f3c:	4659      	mov	r1, fp
 8001f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f56:	4690      	mov	r8, r2
 8001f58:	4699      	mov	r9, r3
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	eb18 0303 	adds.w	r3, r8, r3
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	462b      	mov	r3, r5
 8001f64:	eb49 0303 	adc.w	r3, r9, r3
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f76:	4629      	mov	r1, r5
 8001f78:	020b      	lsls	r3, r1, #8
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001f80:	4621      	mov	r1, r4
 8001f82:	020a      	lsls	r2, r1, #8
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f94:	f7fe f920 	bl	80001d8 <__aeabi_uldivmod>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fa0:	e058      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	4611      	mov	r1, r2
 8001fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fb2:	623b      	str	r3, [r7, #32]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	f04f 0000 	mov.w	r0, #0
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	0159      	lsls	r1, r3, #5
 8001fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fce:	0150      	lsls	r0, r2, #5
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4641      	mov	r1, r8
 8001fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fda:	4649      	mov	r1, r9
 8001fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	00eb      	lsls	r3, r5, #3
 8002006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800200a:	00e2      	lsls	r2, r4, #3
 800200c:	4614      	mov	r4, r2
 800200e:	461d      	mov	r5, r3
 8002010:	4643      	mov	r3, r8
 8002012:	18e3      	adds	r3, r4, r3
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	464b      	mov	r3, r9
 8002018:	eb45 0303 	adc.w	r3, r5, r3
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800202a:	4629      	mov	r1, r5
 800202c:	028b      	lsls	r3, r1, #10
 800202e:	4621      	mov	r1, r4
 8002030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002034:	4621      	mov	r1, r4
 8002036:	028a      	lsls	r2, r1, #10
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203e:	2200      	movs	r2, #0
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	61fa      	str	r2, [r7, #28]
 8002044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002048:	f7fe f8c6 	bl	80001d8 <__aeabi_uldivmod>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4613      	mov	r3, r2
 8002052:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_GetSysClockFreq+0x200>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	3301      	adds	r3, #1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800206e:	e002      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_GetSysClockFreq+0x204>)
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002078:	4618      	mov	r0, r3
 800207a:	3750      	adds	r7, #80	; 0x50
 800207c:	46bd      	mov	sp, r7
 800207e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	00f42400 	.word	0x00f42400
 800208c:	003d0900 	.word	0x003d0900

08002090 <__libc_init_array>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	4d0d      	ldr	r5, [pc, #52]	; (80020c8 <__libc_init_array+0x38>)
 8002094:	4c0d      	ldr	r4, [pc, #52]	; (80020cc <__libc_init_array+0x3c>)
 8002096:	1b64      	subs	r4, r4, r5
 8002098:	10a4      	asrs	r4, r4, #2
 800209a:	2600      	movs	r6, #0
 800209c:	42a6      	cmp	r6, r4
 800209e:	d109      	bne.n	80020b4 <__libc_init_array+0x24>
 80020a0:	4d0b      	ldr	r5, [pc, #44]	; (80020d0 <__libc_init_array+0x40>)
 80020a2:	4c0c      	ldr	r4, [pc, #48]	; (80020d4 <__libc_init_array+0x44>)
 80020a4:	f000 f820 	bl	80020e8 <_init>
 80020a8:	1b64      	subs	r4, r4, r5
 80020aa:	10a4      	asrs	r4, r4, #2
 80020ac:	2600      	movs	r6, #0
 80020ae:	42a6      	cmp	r6, r4
 80020b0:	d105      	bne.n	80020be <__libc_init_array+0x2e>
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b8:	4798      	blx	r3
 80020ba:	3601      	adds	r6, #1
 80020bc:	e7ee      	b.n	800209c <__libc_init_array+0xc>
 80020be:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c2:	4798      	blx	r3
 80020c4:	3601      	adds	r6, #1
 80020c6:	e7f2      	b.n	80020ae <__libc_init_array+0x1e>
 80020c8:	08002118 	.word	0x08002118
 80020cc:	08002118 	.word	0x08002118
 80020d0:	08002118 	.word	0x08002118
 80020d4:	0800211c 	.word	0x0800211c

080020d8 <memset>:
 80020d8:	4402      	add	r2, r0
 80020da:	4603      	mov	r3, r0
 80020dc:	4293      	cmp	r3, r2
 80020de:	d100      	bne.n	80020e2 <memset+0xa>
 80020e0:	4770      	bx	lr
 80020e2:	f803 1b01 	strb.w	r1, [r3], #1
 80020e6:	e7f9      	b.n	80020dc <memset+0x4>

080020e8 <_init>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	bf00      	nop
 80020ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ee:	bc08      	pop	{r3}
 80020f0:	469e      	mov	lr, r3
 80020f2:	4770      	bx	lr

080020f4 <_fini>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr
