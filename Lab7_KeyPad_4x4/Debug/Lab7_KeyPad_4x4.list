
Lab7_KeyPad_4x4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c68  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001e00  08001e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e20  08001e20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e28  08001e28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e28  08001e28  00011e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  08001e3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08001e3c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003be1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f98  00000000  00000000  00023c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  00024bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000398  00000000  00000000  00024fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015256  00000000  00000000  00025380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005453  00000000  00000000  0003a5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f37  00000000  00000000  0003fa29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ec4  00000000  00000000  000c29b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001de8 	.word	0x08001de8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001de8 	.word	0x08001de8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "lcd_text.h"

/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

	HAL_Delay(30);
 80004e0:	201e      	movs	r0, #30
 80004e2:	f000 fd31 	bl	8000f48 <HAL_Delay>
	PIN_LOW(GPIOD,GPIO_PIN_13);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ec:	481d      	ldr	r0, [pc, #116]	; (8000564 <lcd_init+0x88>)
 80004ee:	f000 ffd1 	bl	8001494 <HAL_GPIO_WritePin>
	PIN_LOW(D4_PORT,D4_PIN);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	481b      	ldr	r0, [pc, #108]	; (8000564 <lcd_init+0x88>)
 80004f8:	f000 ffcc 	bl	8001494 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2120      	movs	r1, #32
 8000500:	4818      	ldr	r0, [pc, #96]	; (8000564 <lcd_init+0x88>)
 8000502:	f000 ffc7 	bl	8001494 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000506:	2200      	movs	r2, #0
 8000508:	2108      	movs	r1, #8
 800050a:	4816      	ldr	r0, [pc, #88]	; (8000564 <lcd_init+0x88>)
 800050c:	f000 ffc2 	bl	8001494 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000510:	2200      	movs	r2, #0
 8000512:	2102      	movs	r1, #2
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <lcd_init+0x88>)
 8000516:	f000 ffbd 	bl	8001494 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000520:	4810      	ldr	r0, [pc, #64]	; (8000564 <lcd_init+0x88>)
 8000522:	f000 ffb7 	bl	8001494 <HAL_GPIO_WritePin>

	PIN_HIGH(EN_PORT,EN_PIN);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <lcd_init+0x88>)
 800052e:	f000 ffb1 	bl	8001494 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <lcd_init+0x88>)
 800053a:	f000 ffab 	bl	8001494 <HAL_GPIO_WritePin>

	lcd_write(0,0x28);
 800053e:	2128      	movs	r1, #40	; 0x28
 8000540:	2000      	movs	r0, #0
 8000542:	f000 f811 	bl	8000568 <lcd_write>
	lcd_write(0,0x0c);
 8000546:	210c      	movs	r1, #12
 8000548:	2000      	movs	r0, #0
 800054a:	f000 f80d 	bl	8000568 <lcd_write>
	lcd_write(0,0x06);
 800054e:	2106      	movs	r1, #6
 8000550:	2000      	movs	r0, #0
 8000552:	f000 f809 	bl	8000568 <lcd_write>
	lcd_write(0,0x01);
 8000556:	2101      	movs	r1, #1
 8000558:	2000      	movs	r0, #0
 800055a:	f000 f805 	bl	8000568 <lcd_write>
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020c00 	.word	0x40020c00

08000568 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 8000578:	2002      	movs	r0, #2
 800057a:	f000 fce5 	bl	8000f48 <HAL_Delay>
	if(type)
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d006      	beq.n	8000592 <lcd_write+0x2a>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058a:	4852      	ldr	r0, [pc, #328]	; (80006d4 <lcd_write+0x16c>)
 800058c:	f000 ff82 	bl	8001494 <HAL_GPIO_WritePin>
 8000590:	e005      	b.n	800059e <lcd_write+0x36>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000598:	484e      	ldr	r0, [pc, #312]	; (80006d4 <lcd_write+0x16c>)
 800059a:	f000 ff7b 	bl	8001494 <HAL_GPIO_WritePin>
	}

	//Send High Nibble
	if(data&0x80)
 800059e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	da05      	bge.n	80005b2 <lcd_write+0x4a>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2102      	movs	r1, #2
 80005aa:	484a      	ldr	r0, [pc, #296]	; (80006d4 <lcd_write+0x16c>)
 80005ac:	f000 ff72 	bl	8001494 <HAL_GPIO_WritePin>
 80005b0:	e004      	b.n	80005bc <lcd_write+0x54>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	4847      	ldr	r0, [pc, #284]	; (80006d4 <lcd_write+0x16c>)
 80005b8:	f000 ff6c 	bl	8001494 <HAL_GPIO_WritePin>
	}

	if(data&0x40)
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <lcd_write+0x6a>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2108      	movs	r1, #8
 80005ca:	4842      	ldr	r0, [pc, #264]	; (80006d4 <lcd_write+0x16c>)
 80005cc:	f000 ff62 	bl	8001494 <HAL_GPIO_WritePin>
 80005d0:	e004      	b.n	80005dc <lcd_write+0x74>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	483f      	ldr	r0, [pc, #252]	; (80006d4 <lcd_write+0x16c>)
 80005d8:	f000 ff5c 	bl	8001494 <HAL_GPIO_WritePin>
	}

	if(data&0x20)
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	f003 0320 	and.w	r3, r3, #32
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <lcd_write+0x8a>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2120      	movs	r1, #32
 80005ea:	483a      	ldr	r0, [pc, #232]	; (80006d4 <lcd_write+0x16c>)
 80005ec:	f000 ff52 	bl	8001494 <HAL_GPIO_WritePin>
 80005f0:	e004      	b.n	80005fc <lcd_write+0x94>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4837      	ldr	r0, [pc, #220]	; (80006d4 <lcd_write+0x16c>)
 80005f8:	f000 ff4c 	bl	8001494 <HAL_GPIO_WritePin>
	}

	if(data&0x10)
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	f003 0310 	and.w	r3, r3, #16
 8000602:	2b00      	cmp	r3, #0
 8000604:	d005      	beq.n	8000612 <lcd_write+0xaa>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000606:	2201      	movs	r2, #1
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	4832      	ldr	r0, [pc, #200]	; (80006d4 <lcd_write+0x16c>)
 800060c:	f000 ff42 	bl	8001494 <HAL_GPIO_WritePin>
 8000610:	e004      	b.n	800061c <lcd_write+0xb4>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000612:	2200      	movs	r2, #0
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	482f      	ldr	r0, [pc, #188]	; (80006d4 <lcd_write+0x16c>)
 8000618:	f000 ff3c 	bl	8001494 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000622:	482c      	ldr	r0, [pc, #176]	; (80006d4 <lcd_write+0x16c>)
 8000624:	f000 ff36 	bl	8001494 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <lcd_write+0x16c>)
 8000630:	f000 ff30 	bl	8001494 <HAL_GPIO_WritePin>


	//Send Low Nibble
	if(data&0x08)
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d005      	beq.n	800064a <lcd_write+0xe2>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800063e:	2201      	movs	r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <lcd_write+0x16c>)
 8000644:	f000 ff26 	bl	8001494 <HAL_GPIO_WritePin>
 8000648:	e004      	b.n	8000654 <lcd_write+0xec>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800064a:	2200      	movs	r2, #0
 800064c:	2102      	movs	r1, #2
 800064e:	4821      	ldr	r0, [pc, #132]	; (80006d4 <lcd_write+0x16c>)
 8000650:	f000 ff20 	bl	8001494 <HAL_GPIO_WritePin>
	}

	if(data&0x04)
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	2b00      	cmp	r3, #0
 800065c:	d005      	beq.n	800066a <lcd_write+0x102>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 800065e:	2201      	movs	r2, #1
 8000660:	2108      	movs	r1, #8
 8000662:	481c      	ldr	r0, [pc, #112]	; (80006d4 <lcd_write+0x16c>)
 8000664:	f000 ff16 	bl	8001494 <HAL_GPIO_WritePin>
 8000668:	e004      	b.n	8000674 <lcd_write+0x10c>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800066a:	2200      	movs	r2, #0
 800066c:	2108      	movs	r1, #8
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <lcd_write+0x16c>)
 8000670:	f000 ff10 	bl	8001494 <HAL_GPIO_WritePin>
	}

	if(data&0x02)
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <lcd_write+0x122>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800067e:	2201      	movs	r2, #1
 8000680:	2120      	movs	r1, #32
 8000682:	4814      	ldr	r0, [pc, #80]	; (80006d4 <lcd_write+0x16c>)
 8000684:	f000 ff06 	bl	8001494 <HAL_GPIO_WritePin>
 8000688:	e004      	b.n	8000694 <lcd_write+0x12c>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <lcd_write+0x16c>)
 8000690:	f000 ff00 	bl	8001494 <HAL_GPIO_WritePin>
	}

	if(data&0x01)
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d005      	beq.n	80006aa <lcd_write+0x142>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800069e:	2201      	movs	r2, #1
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <lcd_write+0x16c>)
 80006a4:	f000 fef6 	bl	8001494 <HAL_GPIO_WritePin>
 80006a8:	e004      	b.n	80006b4 <lcd_write+0x14c>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <lcd_write+0x16c>)
 80006b0:	f000 fef0 	bl	8001494 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <lcd_write+0x16c>)
 80006bc:	f000 feea 	bl	8001494 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <lcd_write+0x16c>)
 80006c8:	f000 fee4 	bl	8001494 <HAL_GPIO_WritePin>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40020c00 	.word	0x40020c00

080006d8 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	603a      	str	r2, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	460b      	mov	r3, r1
 80006e6:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d836      	bhi.n	800075c <lcd_puts+0x84>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <lcd_puts+0x1c>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000705 	.word	0x08000705
 80006f8:	08000715 	.word	0x08000715
 80006fc:	08000725 	.word	0x08000725
 8000700:	08000735 	.word	0x08000735
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	3b80      	subs	r3, #128	; 0x80
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ff2b 	bl	8000568 <lcd_write>
			break;
 8000712:	e017      	b.n	8000744 <lcd_puts+0x6c>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	3b40      	subs	r3, #64	; 0x40
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff23 	bl	8000568 <lcd_write>
			break;
 8000722:	e00f      	b.n	8000744 <lcd_puts+0x6c>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	3b70      	subs	r3, #112	; 0x70
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff ff1b 	bl	8000568 <lcd_write>
			break;
 8000732:	e007      	b.n	8000744 <lcd_puts+0x6c>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	3b30      	subs	r3, #48	; 0x30
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff ff13 	bl	8000568 <lcd_write>
			break;
 8000742:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif

	while(*string)
 8000744:	e00a      	b.n	800075c <lcd_puts+0x84>
	{
		lcd_write(1,*string);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	f993 3000 	ldrsb.w	r3, [r3]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff09 	bl	8000568 <lcd_write>
		string++;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	603b      	str	r3, [r7, #0]
	while(*string)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	f993 3000 	ldrsb.w	r3, [r3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1ef      	bne.n	8000746 <lcd_puts+0x6e>
	}
}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <read_keypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char key;
char stringArray[40] = "";
int count = 0;
char read_keypad(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */

	HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2101      	movs	r1, #1
 8000778:	48b9      	ldr	r0, [pc, #740]	; (8000a60 <read_keypad+0x2f0>)
 800077a:	f000 fe8b 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2104      	movs	r1, #4
 8000782:	48b7      	ldr	r0, [pc, #732]	; (8000a60 <read_keypad+0x2f0>)
 8000784:	f000 fe86 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078e:	48b5      	ldr	r0, [pc, #724]	; (8000a64 <read_keypad+0x2f4>)
 8000790:	f000 fe80 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079a:	48b2      	ldr	r0, [pc, #712]	; (8000a64 <read_keypad+0x2f4>)
 800079c:	f000 fe7a 	bl	8001494 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	48af      	ldr	r0, [pc, #700]	; (8000a64 <read_keypad+0x2f4>)
 80007a6:	f000 fe5d 	bl	8001464 <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10a      	bne.n	80007c6 <read_keypad+0x56>
			{
		while ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 80007b0:	bf00      	nop
 80007b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b6:	48ab      	ldr	r0, [pc, #684]	; (8000a64 <read_keypad+0x2f4>)
 80007b8:	f000 fe54 	bl	8001464 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0f7      	beq.n	80007b2 <read_keypad+0x42>
			;
		return '1';
 80007c2:	2331      	movs	r3, #49	; 0x31
 80007c4:	e164      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 80007c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ca:	48a6      	ldr	r0, [pc, #664]	; (8000a64 <read_keypad+0x2f4>)
 80007cc:	f000 fe4a 	bl	8001464 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10a      	bne.n	80007ec <read_keypad+0x7c>
			{
		while ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 80007d6:	bf00      	nop
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	48a1      	ldr	r0, [pc, #644]	; (8000a64 <read_keypad+0x2f4>)
 80007de:	f000 fe41 	bl	8001464 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f7      	beq.n	80007d8 <read_keypad+0x68>
			;
		return '4';
 80007e8:	2334      	movs	r3, #52	; 0x34
 80007ea:	e151      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 80007ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f0:	489b      	ldr	r0, [pc, #620]	; (8000a60 <read_keypad+0x2f0>)
 80007f2:	f000 fe37 	bl	8001464 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10a      	bne.n	8000812 <read_keypad+0xa2>
			{
		while ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 80007fc:	bf00      	nop
 80007fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000802:	4897      	ldr	r0, [pc, #604]	; (8000a60 <read_keypad+0x2f0>)
 8000804:	f000 fe2e 	bl	8001464 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f7      	beq.n	80007fe <read_keypad+0x8e>
			;
		return '7';
 800080e:	2337      	movs	r3, #55	; 0x37
 8000810:	e13e      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000816:	4892      	ldr	r0, [pc, #584]	; (8000a60 <read_keypad+0x2f0>)
 8000818:	f000 fe24 	bl	8001464 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10a      	bne.n	8000838 <read_keypad+0xc8>
			{
		while ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000822:	bf00      	nop
 8000824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000828:	488d      	ldr	r0, [pc, #564]	; (8000a60 <read_keypad+0x2f0>)
 800082a:	f000 fe1b 	bl	8001464 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f7      	beq.n	8000824 <read_keypad+0xb4>
			;
		return '*';
 8000834:	232a      	movs	r3, #42	; 0x2a
 8000836:	e12b      	b.n	8000a90 <read_keypad+0x320>
	}

	HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	4888      	ldr	r0, [pc, #544]	; (8000a60 <read_keypad+0x2f0>)
 800083e:	f000 fe29 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2104      	movs	r1, #4
 8000846:	4886      	ldr	r0, [pc, #536]	; (8000a60 <read_keypad+0x2f0>)
 8000848:	f000 fe24 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4884      	ldr	r0, [pc, #528]	; (8000a64 <read_keypad+0x2f4>)
 8000854:	f000 fe1e 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	4881      	ldr	r0, [pc, #516]	; (8000a64 <read_keypad+0x2f4>)
 8000860:	f000 fe18 	bl	8001494 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	487e      	ldr	r0, [pc, #504]	; (8000a64 <read_keypad+0x2f4>)
 800086a:	f000 fdfb 	bl	8001464 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10a      	bne.n	800088a <read_keypad+0x11a>
			{
		while ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 8000874:	bf00      	nop
 8000876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087a:	487a      	ldr	r0, [pc, #488]	; (8000a64 <read_keypad+0x2f4>)
 800087c:	f000 fdf2 	bl	8001464 <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f7      	beq.n	8000876 <read_keypad+0x106>
			;
		return '2';
 8000886:	2332      	movs	r3, #50	; 0x32
 8000888:	e102      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 800088a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088e:	4875      	ldr	r0, [pc, #468]	; (8000a64 <read_keypad+0x2f4>)
 8000890:	f000 fde8 	bl	8001464 <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10a      	bne.n	80008b0 <read_keypad+0x140>
			{
		while ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 800089a:	bf00      	nop
 800089c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a0:	4870      	ldr	r0, [pc, #448]	; (8000a64 <read_keypad+0x2f4>)
 80008a2:	f000 fddf 	bl	8001464 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0f7      	beq.n	800089c <read_keypad+0x12c>
			;
		return '5';
 80008ac:	2335      	movs	r3, #53	; 0x35
 80008ae:	e0ef      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 80008b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b4:	486a      	ldr	r0, [pc, #424]	; (8000a60 <read_keypad+0x2f0>)
 80008b6:	f000 fdd5 	bl	8001464 <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <read_keypad+0x166>
			{
		while ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 80008c0:	bf00      	nop
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	4866      	ldr	r0, [pc, #408]	; (8000a60 <read_keypad+0x2f0>)
 80008c8:	f000 fdcc 	bl	8001464 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f7      	beq.n	80008c2 <read_keypad+0x152>
			;
		return '8';
 80008d2:	2338      	movs	r3, #56	; 0x38
 80008d4:	e0dc      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 80008d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008da:	4861      	ldr	r0, [pc, #388]	; (8000a60 <read_keypad+0x2f0>)
 80008dc:	f000 fdc2 	bl	8001464 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10a      	bne.n	80008fc <read_keypad+0x18c>
			{
		while ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 80008e6:	bf00      	nop
 80008e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ec:	485c      	ldr	r0, [pc, #368]	; (8000a60 <read_keypad+0x2f0>)
 80008ee:	f000 fdb9 	bl	8001464 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f7      	beq.n	80008e8 <read_keypad+0x178>
			;
		return '0';
 80008f8:	2330      	movs	r3, #48	; 0x30
 80008fa:	e0c9      	b.n	8000a90 <read_keypad+0x320>
	}

	HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 80008fc:	2201      	movs	r2, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	4857      	ldr	r0, [pc, #348]	; (8000a60 <read_keypad+0x2f0>)
 8000902:	f000 fdc7 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 8000906:	2201      	movs	r2, #1
 8000908:	2104      	movs	r1, #4
 800090a:	4855      	ldr	r0, [pc, #340]	; (8000a60 <read_keypad+0x2f0>)
 800090c:	f000 fdc2 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_RESET);  // Pull the R3 High
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	4853      	ldr	r0, [pc, #332]	; (8000a64 <read_keypad+0x2f4>)
 8000918:	f000 fdbc 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000922:	4850      	ldr	r0, [pc, #320]	; (8000a64 <read_keypad+0x2f4>)
 8000924:	f000 fdb6 	bl	8001494 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	484d      	ldr	r0, [pc, #308]	; (8000a64 <read_keypad+0x2f4>)
 800092e:	f000 fd99 	bl	8001464 <HAL_GPIO_ReadPin>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10a      	bne.n	800094e <read_keypad+0x1de>
			{
		while ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 8000938:	bf00      	nop
 800093a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093e:	4849      	ldr	r0, [pc, #292]	; (8000a64 <read_keypad+0x2f4>)
 8000940:	f000 fd90 	bl	8001464 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f7      	beq.n	800093a <read_keypad+0x1ca>
			;
		return '3';
 800094a:	2333      	movs	r3, #51	; 0x33
 800094c:	e0a0      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 800094e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000952:	4844      	ldr	r0, [pc, #272]	; (8000a64 <read_keypad+0x2f4>)
 8000954:	f000 fd86 	bl	8001464 <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10a      	bne.n	8000974 <read_keypad+0x204>
			{
		while ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 800095e:	bf00      	nop
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	483f      	ldr	r0, [pc, #252]	; (8000a64 <read_keypad+0x2f4>)
 8000966:	f000 fd7d 	bl	8001464 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f7      	beq.n	8000960 <read_keypad+0x1f0>
			;
		return '6';
 8000970:	2336      	movs	r3, #54	; 0x36
 8000972:	e08d      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000978:	4839      	ldr	r0, [pc, #228]	; (8000a60 <read_keypad+0x2f0>)
 800097a:	f000 fd73 	bl	8001464 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10a      	bne.n	800099a <read_keypad+0x22a>
			{
		while ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000984:	bf00      	nop
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	4835      	ldr	r0, [pc, #212]	; (8000a60 <read_keypad+0x2f0>)
 800098c:	f000 fd6a 	bl	8001464 <HAL_GPIO_ReadPin>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f7      	beq.n	8000986 <read_keypad+0x216>
			;
		return '9';
 8000996:	2339      	movs	r3, #57	; 0x39
 8000998:	e07a      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 800099a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099e:	4830      	ldr	r0, [pc, #192]	; (8000a60 <read_keypad+0x2f0>)
 80009a0:	f000 fd60 	bl	8001464 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10a      	bne.n	80009c0 <read_keypad+0x250>
			{
		while ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 80009aa:	bf00      	nop
 80009ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b0:	482b      	ldr	r0, [pc, #172]	; (8000a60 <read_keypad+0x2f0>)
 80009b2:	f000 fd57 	bl	8001464 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0f7      	beq.n	80009ac <read_keypad+0x23c>
			;
		return '#';
 80009bc:	2323      	movs	r3, #35	; 0x23
 80009be:	e067      	b.n	8000a90 <read_keypad+0x320>
	}

	HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	4826      	ldr	r0, [pc, #152]	; (8000a60 <read_keypad+0x2f0>)
 80009c6:	f000 fd65 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 80009ca:	2201      	movs	r2, #1
 80009cc:	2104      	movs	r1, #4
 80009ce:	4824      	ldr	r0, [pc, #144]	; (8000a60 <read_keypad+0x2f0>)
 80009d0:	f000 fd60 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009da:	4822      	ldr	r0, [pc, #136]	; (8000a64 <read_keypad+0x2f4>)
 80009dc:	f000 fd5a 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e6:	481f      	ldr	r0, [pc, #124]	; (8000a64 <read_keypad+0x2f4>)
 80009e8:	f000 fd54 	bl	8001494 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	481c      	ldr	r0, [pc, #112]	; (8000a64 <read_keypad+0x2f4>)
 80009f2:	f000 fd37 	bl	8001464 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10a      	bne.n	8000a12 <read_keypad+0x2a2>
			{
		while ((HAL_GPIO_ReadPin(R1_PORT, R1_PIN)) == 0)
 80009fc:	bf00      	nop
 80009fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <read_keypad+0x2f4>)
 8000a04:	f000 fd2e 	bl	8001464 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f7      	beq.n	80009fe <read_keypad+0x28e>
			;
		return 'A';
 8000a0e:	2341      	movs	r3, #65	; 0x41
 8000a10:	e03e      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 8000a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a16:	4813      	ldr	r0, [pc, #76]	; (8000a64 <read_keypad+0x2f4>)
 8000a18:	f000 fd24 	bl	8001464 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10a      	bne.n	8000a38 <read_keypad+0x2c8>
			{
		while ((HAL_GPIO_ReadPin(R2_PORT, R2_PIN)) == 0)
 8000a22:	bf00      	nop
 8000a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a28:	480e      	ldr	r0, [pc, #56]	; (8000a64 <read_keypad+0x2f4>)
 8000a2a:	f000 fd1b 	bl	8001464 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f7      	beq.n	8000a24 <read_keypad+0x2b4>
			;
		return 'B';
 8000a34:	2342      	movs	r3, #66	; 0x42
 8000a36:	e02b      	b.n	8000a90 <read_keypad+0x320>
	}
	if ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3c:	4808      	ldr	r0, [pc, #32]	; (8000a60 <read_keypad+0x2f0>)
 8000a3e:	f000 fd11 	bl	8001464 <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10f      	bne.n	8000a68 <read_keypad+0x2f8>
			{
		while ((HAL_GPIO_ReadPin(R3_PORT, R3_PIN)) == 0)
 8000a48:	bf00      	nop
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	4804      	ldr	r0, [pc, #16]	; (8000a60 <read_keypad+0x2f0>)
 8000a50:	f000 fd08 	bl	8001464 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0f7      	beq.n	8000a4a <read_keypad+0x2da>
			;
		return 'C';
 8000a5a:	2343      	movs	r3, #67	; 0x43
 8000a5c:	e018      	b.n	8000a90 <read_keypad+0x320>
 8000a5e:	bf00      	nop
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40021000 	.word	0x40021000
	}
	if ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <read_keypad+0x324>)
 8000a6e:	f000 fcf9 	bl	8001464 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10a      	bne.n	8000a8e <read_keypad+0x31e>
			{
		while ((HAL_GPIO_ReadPin(R4_PORT, R4_PIN)) == 0)
 8000a78:	bf00      	nop
 8000a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <read_keypad+0x324>)
 8000a80:	f000 fcf0 	bl	8001464 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f7      	beq.n	8000a7a <read_keypad+0x30a>
			;
		return 'D';
 8000a8a:	2344      	movs	r3, #68	; 0x44
 8000a8c:	e000      	b.n	8000a90 <read_keypad+0x320>
	}
	return '/';
 8000a8e:	232f      	movs	r3, #47	; 0x2f
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020400 	.word	0x40020400

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f000 f9e2 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f830 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 f896 	bl	8000bd4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000aa8:	f7ff fd18 	bl	80004dc <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		key = read_keypad();
 8000aac:	f7ff fe60 	bl	8000770 <read_keypad>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <main+0x5c>)
 8000ab6:	701a      	strb	r2, [r3, #0]
		if (key != '/') {
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <main+0x5c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b2f      	cmp	r3, #47	; 0x2f
 8000abe:	d00f      	beq.n	8000ae0 <main+0x48>
			stringArray[count] = key;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <main+0x60>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <main+0x5c>)
 8000ac6:	7811      	ldrb	r1, [r2, #0]
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <main+0x64>)
 8000aca:	54d1      	strb	r1, [r2, r3]
			lcd_puts(1, 0, (int8_t*) stringArray);
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <main+0x64>)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fe01 	bl	80006d8 <lcd_puts>
			count++;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <main+0x60>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <main+0x60>)
 8000ade:	6013      	str	r3, [r2, #0]
		}
		lcd_puts(0, 0, (int8_t*) "Test LCD 1602");
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <main+0x68>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fdf7 	bl	80006d8 <lcd_puts>
		HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f000 fa2c 	bl	8000f48 <HAL_Delay>
		key = read_keypad();
 8000af0:	e7dc      	b.n	8000aac <main+0x14>
 8000af2:	bf00      	nop
 8000af4:	20000028 	.word	0x20000028
 8000af8:	20000054 	.word	0x20000054
 8000afc:	2000002c 	.word	0x2000002c
 8000b00:	08001e00 	.word	0x08001e00

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	; 0x50
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0320 	add.w	r3, r7, #32
 8000b0e:	2230      	movs	r2, #48	; 0x30
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f960 	bl	8001dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <SystemClock_Config+0xc8>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <SystemClock_Config+0xc8>)
 8000b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <SystemClock_Config+0xc8>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <SystemClock_Config+0xcc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <SystemClock_Config+0xcc>)
 8000b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <SystemClock_Config+0xcc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b78:	2332      	movs	r3, #50	; 0x32
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fc9d 	bl	80014c8 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b94:	f000 f8d2 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 feff 	bl	80019b8 <HAL_RCC_ClockConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bc0:	f000 f8bc 	bl	8000d3c <Error_Handler>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3750      	adds	r7, #80	; 0x50
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b4f      	ldr	r3, [pc, #316]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a4e      	ldr	r2, [pc, #312]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b48      	ldr	r3, [pc, #288]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a47      	ldr	r2, [pc, #284]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a40      	ldr	r2, [pc, #256]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <MX_GPIO_Init+0x158>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2105      	movs	r1, #5
 8000c7a:	482d      	ldr	r0, [pc, #180]	; (8000d30 <MX_GPIO_Init+0x15c>)
 8000c7c:	f000 fc0a 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000c86:	482b      	ldr	r0, [pc, #172]	; (8000d34 <MX_GPIO_Init+0x160>)
 8000c88:	f000 fc04 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f64a 01aa 	movw	r1, #43178	; 0xa8aa
 8000c92:	4829      	ldr	r0, [pc, #164]	; (8000d38 <MX_GPIO_Init+0x164>)
 8000c94:	f000 fbfe 	bl	8001494 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000c98:	2305      	movs	r3, #5
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4820      	ldr	r0, [pc, #128]	; (8000d30 <MX_GPIO_Init+0x15c>)
 8000cb0:	f000 fa54 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000cb4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4819      	ldr	r0, [pc, #100]	; (8000d34 <MX_GPIO_Init+0x160>)
 8000cce:	f000 fa45 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000cd2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4813      	ldr	r0, [pc, #76]	; (8000d34 <MX_GPIO_Init+0x160>)
 8000ce8:	f000 fa38 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <MX_GPIO_Init+0x15c>)
 8000d02:	f000 fa2b 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD13 PD15 PD1
                           PD3 PD5 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_1
 8000d06:	f64a 03aa 	movw	r3, #43178	; 0xa8aa
 8000d0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d14:	2301      	movs	r3, #1
 8000d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_GPIO_Init+0x164>)
 8000d20:	f000 fa1c 	bl	800115c <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f890 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e16:	490e      	ldr	r1, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e2c:	4c0b      	ldr	r4, [pc, #44]	; (8000e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ffd7 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f000 ffa7 	bl	8001d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fe29 	bl	8000a98 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e54:	08001e30 	.word	0x08001e30
  ldr r2, =_sbss
 8000e58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e5c:	2000005c 	.word	0x2000005c

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f931 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 f808 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff ff56 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x54>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f93b 	bl	8001142 <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 f911 	bl	800110a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_InitTick+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000058 	.word	0x20000058

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000058 	.word	0x20000058

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff47 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff5c 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff8e 	bl	8001048 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffb0 	bl	80010b0 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e159      	b.n	800142c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 8148 	bne.w	8001426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d005      	beq.n	80011ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b03      	cmp	r3, #3
 800121a:	d017      	beq.n	800124c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a2 	beq.w	8001426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b57      	ldr	r3, [pc, #348]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a56      	ldr	r2, [pc, #344]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_GPIO_Init+0x2ec>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_Init+0x2f0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x202>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <HAL_GPIO_Init+0x2f4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x1fe>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a47      	ldr	r2, [pc, #284]	; (8001454 <HAL_GPIO_Init+0x2f8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x1fa>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a46      	ldr	r2, [pc, #280]	; (8001458 <HAL_GPIO_Init+0x2fc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x1f6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_GPIO_Init+0x300>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x1f2>
 800134a:	2304      	movs	r3, #4
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800134e:	2307      	movs	r3, #7
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x204>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x204>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x2ec>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <HAL_GPIO_Init+0x304>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a2:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f6:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_GPIO_Init+0x304>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f aea2 	bls.w	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e267      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d075      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	4b88      	ldr	r3, [pc, #544]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d00c      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4b85      	ldr	r3, [pc, #532]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d112      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b7e      	ldr	r3, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05b      	beq.n	80015d0 <HAL_RCC_OscConfig+0x108>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d157      	bne.n	80015d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e242      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x74>
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a75      	ldr	r2, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b70      	ldr	r3, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6f      	ldr	r2, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6c      	ldr	r2, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 8001560:	4b69      	ldr	r3, [pc, #420]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a68      	ldr	r2, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a65      	ldr	r2, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fcd6 	bl	8000f30 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fcd2 	bl	8000f30 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e207      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b5b      	ldr	r3, [pc, #364]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xc0>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fcc2 	bl	8000f30 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fcbe 	bl	8000f30 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1f3      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0xe8>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1c7      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4937      	ldr	r1, [pc, #220]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <HAL_RCC_OscConfig+0x244>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fc77 	bl	8000f30 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fc73 	bl	8000f30 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1a8      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4925      	ldr	r1, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_OscConfig+0x244>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fc56 	bl	8000f30 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fc52 	bl	8000f30 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e187      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d036      	beq.n	8001720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x248>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc36 	bl	8000f30 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc32 	bl	8000f30 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e167      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
 80016e6:	e01b      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_RCC_OscConfig+0x248>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fc1f 	bl	8000f30 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e00e      	b.n	8001714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fc1b 	bl	8000f30 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d907      	bls.n	8001714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e150      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
 8001708:	40023800 	.word	0x40023800
 800170c:	42470000 	.word	0x42470000
 8001710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ea      	bne.n	80016f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8097 	beq.w	800185c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10f      	bne.n	800175e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a7c      	ldr	r2, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b7a      	ldr	r3, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b77      	ldr	r3, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b74      	ldr	r3, [pc, #464]	; (800193c <HAL_RCC_OscConfig+0x474>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a73      	ldr	r2, [pc, #460]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff fbdb 	bl	8000f30 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff fbd7 	bl	8000f30 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e10c      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b6a      	ldr	r3, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2ea>
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6713      	str	r3, [r2, #112]	; 0x70
 80017b0:	e01c      	b.n	80017ec <HAL_RCC_OscConfig+0x324>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x30c>
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a5b      	ldr	r2, [pc, #364]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0x324>
 80017d4:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	4a57      	ldr	r2, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6713      	str	r3, [r2, #112]	; 0x70
 80017e0:	4b55      	ldr	r3, [pc, #340]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	4a54      	ldr	r2, [pc, #336]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d015      	beq.n	8001820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fb9c 	bl	8000f30 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb98 	bl	8000f30 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0cb      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0ee      	beq.n	80017fc <HAL_RCC_OscConfig+0x334>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff fb86 	bl	8000f30 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff fb82 	bl	8000f30 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0b5      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183e:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ee      	bne.n	8001828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4a38      	ldr	r2, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a1 	beq.w	80019a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	d05c      	beq.n	800192c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d141      	bne.n	80018fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fb56 	bl	8000f30 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fb52 	bl	8000f30 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e087      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	3b01      	subs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	491b      	ldr	r1, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb2b 	bl	8000f30 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fb27 	bl	8000f30 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e05c      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x416>
 80018fc:	e054      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fb14 	bl	8000f30 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fb10 	bl	8000f30 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e045      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x444>
 800192a:	e03d      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e038      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000
 8001940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x4ec>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d028      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d121      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d11a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800197a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	3b01      	subs	r3, #1
 800198e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0cc      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d90c      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d044      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d119      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e067      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7ff fa42 	bl	8000f30 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff fa3e 	bl	8000f30 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e04f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d20c      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f9a2 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08001e10 	.word	0x08001e10
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b094      	sub	sp, #80	; 0x50
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b90:	2300      	movs	r3, #0
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b94:	2300      	movs	r3, #0
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9c:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f200 80e1 	bhi.w	8001d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb6:	e0db      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b73      	ldr	r3, [pc, #460]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bbc:	e0db      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbe:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc2:	e0d8      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bce:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d063      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	f04f 0000 	mov.w	r0, #0
 8001bfe:	f04f 0100 	mov.w	r1, #0
 8001c02:	0159      	lsls	r1, r3, #5
 8001c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c08:	0150      	lsls	r0, r2, #5
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4621      	mov	r1, r4
 8001c10:	1a51      	subs	r1, r2, r1
 8001c12:	6139      	str	r1, [r7, #16]
 8001c14:	4629      	mov	r1, r5
 8001c16:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c28:	4659      	mov	r1, fp
 8001c2a:	018b      	lsls	r3, r1, #6
 8001c2c:	4651      	mov	r1, sl
 8001c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c32:	4651      	mov	r1, sl
 8001c34:	018a      	lsls	r2, r1, #6
 8001c36:	4651      	mov	r1, sl
 8001c38:	ebb2 0801 	subs.w	r8, r2, r1
 8001c3c:	4659      	mov	r1, fp
 8001c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c56:	4690      	mov	r8, r2
 8001c58:	4699      	mov	r9, r3
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	eb18 0303 	adds.w	r3, r8, r3
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	462b      	mov	r3, r5
 8001c64:	eb49 0303 	adc.w	r3, r9, r3
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c76:	4629      	mov	r1, r5
 8001c78:	024b      	lsls	r3, r1, #9
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c80:	4621      	mov	r1, r4
 8001c82:	024a      	lsls	r2, r1, #9
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c94:	f7fe faa0 	bl	80001d8 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ca0:	e058      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	4611      	mov	r1, r2
 8001cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cb2:	623b      	str	r3, [r7, #32]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	0159      	lsls	r1, r3, #5
 8001cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cce:	0150      	lsls	r0, r2, #5
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cda:	4649      	mov	r1, r9
 8001cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	00eb      	lsls	r3, r5, #3
 8001d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0a:	00e2      	lsls	r2, r4, #3
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	4643      	mov	r3, r8
 8001d12:	18e3      	adds	r3, r4, r3
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	464b      	mov	r3, r9
 8001d18:	eb45 0303 	adc.w	r3, r5, r3
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	028b      	lsls	r3, r1, #10
 8001d2e:	4621      	mov	r1, r4
 8001d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d34:	4621      	mov	r1, r4
 8001d36:	028a      	lsls	r2, r1, #10
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	61fa      	str	r2, [r7, #28]
 8001d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d48:	f7fe fa46 	bl	80001d8 <__aeabi_uldivmod>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4613      	mov	r3, r2
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d6e:	e002      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3750      	adds	r7, #80	; 0x50
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <__libc_init_array>:
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	4d0d      	ldr	r5, [pc, #52]	; (8001dc8 <__libc_init_array+0x38>)
 8001d94:	4c0d      	ldr	r4, [pc, #52]	; (8001dcc <__libc_init_array+0x3c>)
 8001d96:	1b64      	subs	r4, r4, r5
 8001d98:	10a4      	asrs	r4, r4, #2
 8001d9a:	2600      	movs	r6, #0
 8001d9c:	42a6      	cmp	r6, r4
 8001d9e:	d109      	bne.n	8001db4 <__libc_init_array+0x24>
 8001da0:	4d0b      	ldr	r5, [pc, #44]	; (8001dd0 <__libc_init_array+0x40>)
 8001da2:	4c0c      	ldr	r4, [pc, #48]	; (8001dd4 <__libc_init_array+0x44>)
 8001da4:	f000 f820 	bl	8001de8 <_init>
 8001da8:	1b64      	subs	r4, r4, r5
 8001daa:	10a4      	asrs	r4, r4, #2
 8001dac:	2600      	movs	r6, #0
 8001dae:	42a6      	cmp	r6, r4
 8001db0:	d105      	bne.n	8001dbe <__libc_init_array+0x2e>
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db8:	4798      	blx	r3
 8001dba:	3601      	adds	r6, #1
 8001dbc:	e7ee      	b.n	8001d9c <__libc_init_array+0xc>
 8001dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc2:	4798      	blx	r3
 8001dc4:	3601      	adds	r6, #1
 8001dc6:	e7f2      	b.n	8001dae <__libc_init_array+0x1e>
 8001dc8:	08001e28 	.word	0x08001e28
 8001dcc:	08001e28 	.word	0x08001e28
 8001dd0:	08001e28 	.word	0x08001e28
 8001dd4:	08001e2c 	.word	0x08001e2c

08001dd8 <memset>:
 8001dd8:	4402      	add	r2, r0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d100      	bne.n	8001de2 <memset+0xa>
 8001de0:	4770      	bx	lr
 8001de2:	f803 1b01 	strb.w	r1, [r3], #1
 8001de6:	e7f9      	b.n	8001ddc <memset+0x4>

08001de8 <_init>:
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dea:	bf00      	nop
 8001dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dee:	bc08      	pop	{r3}
 8001df0:	469e      	mov	lr, r3
 8001df2:	4770      	bx	lr

08001df4 <_fini>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	bf00      	nop
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr
