
RFID_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002294  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800243c  0800243c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002444  08002444  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002448  08002448  00012448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800244c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000014  08002460  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002460  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a92  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000143a  00000000  00000000  00026ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  000285b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b2a  00000000  00000000  00028ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072cc  00000000  00000000  0003d6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000818d4  00000000  00000000  0004499e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6272  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c4  00000000  00000000  000c62c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002414 	.word	0x08002414

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08002414 	.word	0x08002414

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fd38 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f846 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8e2 	bl	80006b0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004ec:	f000 f8aa 	bl	8000644 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80004f0:	f000 fbde 	bl	8000cb0 <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (MFRC522_Check(CardID) == MI_OK) {
 80004f4:	481c      	ldr	r0, [pc, #112]	; (8000568 <main+0x8c>)
 80004f6:	f000 f9ef 	bl	80008d8 <MFRC522_Check>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d11f      	bne.n	8000540 <main+0x64>
			//HAL_UART_Transmit(&huart2, (uint8_t*) "Waiting check...\n", 17, 1000);
			if (MFRC522_Compare(CardID, MyID) == MI_OK) {
 8000500:	491a      	ldr	r1, [pc, #104]	; (800056c <main+0x90>)
 8000502:	4819      	ldr	r0, [pc, #100]	; (8000568 <main+0x8c>)
 8000504:	f000 fa01 	bl	800090a <MFRC522_Compare>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d10c      	bne.n	8000528 <main+0x4c>
				//HAL_UART_Transmit(&huart2, (uint8_t*) "correct\n", 5, 1000);
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000514:	4816      	ldr	r0, [pc, #88]	; (8000570 <main+0x94>)
 8000516:	f001 f81d 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0x94>)
 8000522:	f001 f817 	bl	8001554 <HAL_GPIO_WritePin>
 8000526:	e00b      	b.n	8000540 <main+0x64>
			} else {
				//HAL_UART_Transmit(&huart2, (uint8_t*) "wrong\n", 4, 1000);
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052e:	4810      	ldr	r0, [pc, #64]	; (8000570 <main+0x94>)
 8000530:	f001 f810 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <main+0x94>)
 800053c:	f001 f80a 	bl	8001554 <HAL_GPIO_WritePin>
			}
		}
		HAL_Delay(500);
 8000540:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000544:	f000 fd78 	bl	8001038 <HAL_Delay>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <main+0x94>)
 8000550:	f001 f800 	bl	8001554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <main+0x94>)
 800055c:	f000 fffa 	bl	8001554 <HAL_GPIO_WritePin>

//	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
//	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
//	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
		HAL_Delay(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f000 fd69 	bl	8001038 <HAL_Delay>
		if (MFRC522_Check(CardID) == MI_OK) {
 8000566:	e7c5      	b.n	80004f4 <main+0x18>
 8000568:	20000088 	.word	0x20000088
 800056c:	20000000 	.word	0x20000000
 8000570:	40020c00 	.word	0x40020c00

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f001 ff3e 	bl	8002404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a26      	ldr	r2, [pc, #152]	; (800063c <SystemClock_Config+0xc8>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <SystemClock_Config+0xc8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a20      	ldr	r2, [pc, #128]	; (8000640 <SystemClock_Config+0xcc>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <SystemClock_Config+0xcc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005e4:	230c      	movs	r3, #12
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005e8:	23c0      	movs	r3, #192	; 0xc0
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 ffc5 	bl	8001588 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000604:	f000 f8d8 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2103      	movs	r1, #3
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fa27 	bl	8001a78 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000630:	f000 f8c2 	bl	80007b8 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	; 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_SPI2_Init+0x64>)
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <MX_SPI2_Init+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000654:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_SPI2_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_SPI2_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_SPI2_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_SPI2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000690:	220a      	movs	r2, #10
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000696:	f001 fb9b 	bl	8001dd0 <HAL_SPI_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006a0:	f000 f88a 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000030 	.word	0x20000030
 80006ac:	40003800 	.word	0x40003800

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <MX_GPIO_Init+0xfc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <MX_GPIO_Init+0xfc>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <MX_GPIO_Init+0xfc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <MX_GPIO_Init+0xfc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a30      	ldr	r2, [pc, #192]	; (80007ac <MX_GPIO_Init+0xfc>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <MX_GPIO_Init+0xfc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_GPIO_Init+0xfc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a29      	ldr	r2, [pc, #164]	; (80007ac <MX_GPIO_Init+0xfc>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MX_GPIO_Init+0xfc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <MX_GPIO_Init+0xfc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a22      	ldr	r2, [pc, #136]	; (80007ac <MX_GPIO_Init+0xfc>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_GPIO_Init+0xfc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_GPIO_Init+0xfc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <MX_GPIO_Init+0xfc>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_GPIO_Init+0xfc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2110      	movs	r1, #16
 8000756:	4816      	ldr	r0, [pc, #88]	; (80007b0 <MX_GPIO_Init+0x100>)
 8000758:	f000 fefc 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_GPIO_Init+0x104>)
 8000764:	f000 fef6 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000768:	2310      	movs	r3, #16
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_GPIO_Init+0x100>)
 8000780:	f000 fd64 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000784:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_GPIO_Init+0x104>)
 800079e:	f000 fd55 	bl	800124c <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020000 	.word	0x40020000
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80007d2:	f107 0208 	add.w	r2, r7, #8
 80007d6:	f107 010c 	add.w	r1, r7, #12
 80007da:	230a      	movs	r3, #10
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <SPI1SendByte+0x2c>)
 80007e2:	f001 fb7e 	bl	8001ee2 <HAL_SPI_TransmitReceive>
	return readValue[0];
 80007e6:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000030 	.word	0x20000030

080007f4 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <SPI1_WriteReg+0x3c>)
 800080a:	f000 fea3 	bl	8001554 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ffd7 	bl	80007c4 <SPI1SendByte>
	SPI1SendByte(value);
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffd3 	bl	80007c4 <SPI1SendByte>
	cs_set();
 800081e:	2201      	movs	r2, #1
 8000820:	2110      	movs	r1, #16
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <SPI1_WriteReg+0x3c>)
 8000824:	f000 fe96 	bl	8001554 <HAL_GPIO_WritePin>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40020000 	.word	0x40020000

08000834 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800083e:	2200      	movs	r2, #0
 8000840:	2110      	movs	r1, #16
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <SPI1_ReadReg+0x3c>)
 8000844:	f000 fe86 	bl	8001554 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffba 	bl	80007c4 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ffb7 	bl	80007c4 <SPI1SendByte>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800085a:	2201      	movs	r2, #1
 800085c:	2110      	movs	r1, #16
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <SPI1_ReadReg+0x3c>)
 8000860:	f000 fe78 	bl	8001554 <HAL_GPIO_WritePin>
	return val;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40020000 	.word	0x40020000

08000874 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800088e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000890:	79ba      	ldrb	r2, [r7, #6]
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ffac 	bl	80007f4 <SPI1_WriteReg>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffb5 	bl	8000834 <SPI1_ReadReg>
 80008ca:	4603      	mov	r3, r0
 80008cc:	73fb      	strb	r3, [r7, #15]
	return val;	
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	2026      	movs	r0, #38	; 0x26
 80008e4:	f000 f86a 	bl	80009bc <MFRC522_Request>
 80008e8:	4603      	mov	r3, r0
 80008ea:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d104      	bne.n	80008fc <MFRC522_Check+0x24>
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f956 	bl	8000ba4 <MFRC522_Anticoll>
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 80008fc:	f000 fa19 	bl	8000d32 <MFRC522_Halt>
	return status;
 8000900:	7bfb      	ldrb	r3, [r7, #15]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 800090a:	b480      	push	{r7}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e00e      	b.n	8000938 <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	6839      	ldr	r1, [r7, #0]
 8000926:	440b      	add	r3, r1
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d001      	beq.n	8000932 <MFRC522_Compare+0x28>
 800092e:	2302      	movs	r3, #2
 8000930:	e006      	b.n	8000940 <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	3301      	adds	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d9ed      	bls.n	800091a <MFRC522_Compare+0x10>
	}
	return MI_OK;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ffa0 	bl	80008a4 <MFRC522_ReadRegister>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	4313      	orrs	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff7e 	bl	8000874 <MFRC522_WriteRegister>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	460a      	mov	r2, r1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	4613      	mov	r3, r2
 800098e:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff86 	bl	80008a4 <MFRC522_ReadRegister>
 8000998:	4603      	mov	r3, r0
 800099a:	b25a      	sxtb	r2, r3
 800099c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	4013      	ands	r3, r2
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff60 	bl	8000874 <MFRC522_WriteRegister>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 80009c8:	2107      	movs	r1, #7
 80009ca:	200d      	movs	r0, #13
 80009cc:	f7ff ff52 	bl	8000874 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	2201      	movs	r2, #1
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	200c      	movs	r0, #12
 80009e4:	f000 f80f 	bl	8000a06 <MFRC522_ToCard>
 80009e8:	4603      	mov	r3, r0
 80009ea:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <MFRC522_Request+0x3c>
 80009f2:	89bb      	ldrh	r3, [r7, #12]
 80009f4:	2b10      	cmp	r3, #16
 80009f6:	d001      	beq.n	80009fc <MFRC522_Request+0x40>
 80009f8:	2302      	movs	r3, #2
 80009fa:	73fb      	strb	r3, [r7, #15]
	return status;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000a06:	b590      	push	{r4, r7, lr}
 8000a08:	b087      	sub	sp, #28
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]
 8000a14:	4613      	mov	r3, r2
 8000a16:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000a20:	2300      	movs	r3, #0
 8000a22:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	2b0c      	cmp	r3, #12
 8000a28:	d006      	beq.n	8000a38 <MFRC522_ToCard+0x32>
 8000a2a:	2b0e      	cmp	r3, #14
 8000a2c:	d109      	bne.n	8000a42 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000a2e:	2312      	movs	r3, #18
 8000a30:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000a32:	2310      	movs	r3, #16
 8000a34:	757b      	strb	r3, [r7, #21]
			break;
 8000a36:	e005      	b.n	8000a44 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000a38:	2377      	movs	r3, #119	; 0x77
 8000a3a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000a3c:	2330      	movs	r3, #48	; 0x30
 8000a3e:	757b      	strb	r3, [r7, #21]
			break;
 8000a40:	e000      	b.n	8000a44 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8000a42:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000a44:	7dbb      	ldrb	r3, [r7, #22]
 8000a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff ff10 	bl	8000874 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	2004      	movs	r0, #4
 8000a58:	f7ff ff92 	bl	8000980 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f7ff ff74 	bl	800094c <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000a64:	2100      	movs	r1, #0
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff ff04 	bl	8000874 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	827b      	strh	r3, [r7, #18]
 8000a70:	e00a      	b.n	8000a88 <MFRC522_ToCard+0x82>
 8000a72:	8a7b      	ldrh	r3, [r7, #18]
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	2009      	movs	r0, #9
 8000a7e:	f7ff fef9 	bl	8000874 <MFRC522_WriteRegister>
 8000a82:	8a7b      	ldrh	r3, [r7, #18]
 8000a84:	3301      	adds	r3, #1
 8000a86:	827b      	strh	r3, [r7, #18]
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	8a7a      	ldrh	r2, [r7, #18]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d3ef      	bcc.n	8000a72 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	4619      	mov	r1, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff feec 	bl	8000874 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	2b0c      	cmp	r3, #12
 8000aa0:	d103      	bne.n	8000aaa <MFRC522_ToCard+0xa4>
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	200d      	movs	r0, #13
 8000aa6:	f7ff ff51 	bl	800094c <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000aaa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aae:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000ab0:	2004      	movs	r0, #4
 8000ab2:	f7ff fef7 	bl	80008a4 <MFRC522_ReadRegister>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	753b      	strb	r3, [r7, #20]
		i--;
 8000aba:	8a7b      	ldrh	r3, [r7, #18]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000ac0:	8a7b      	ldrh	r3, [r7, #18]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00a      	beq.n	8000adc <MFRC522_ToCard+0xd6>
 8000ac6:	7d3b      	ldrb	r3, [r7, #20]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d105      	bne.n	8000adc <MFRC522_ToCard+0xd6>
 8000ad0:	7d3a      	ldrb	r2, [r7, #20]
 8000ad2:	7d7b      	ldrb	r3, [r7, #21]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0e9      	beq.n	8000ab0 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	200d      	movs	r0, #13
 8000ae0:	f7ff ff4e 	bl	8000980 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000ae4:	8a7b      	ldrh	r3, [r7, #18]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d057      	beq.n	8000b9a <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000aea:	2006      	movs	r0, #6
 8000aec:	f7ff feda 	bl	80008a4 <MFRC522_ReadRegister>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f003 031b 	and.w	r3, r3, #27
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000afe:	7d3a      	ldrb	r2, [r7, #20]
 8000b00:	7dbb      	ldrb	r3, [r7, #22]
 8000b02:	4013      	ands	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MFRC522_ToCard+0x10c>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	2b0c      	cmp	r3, #12
 8000b16:	d140      	bne.n	8000b9a <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f7ff fec3 	bl	80008a4 <MFRC522_ReadRegister>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000b22:	200c      	movs	r0, #12
 8000b24:	f7ff febe 	bl	80008a4 <MFRC522_ReadRegister>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000b30:	7c7b      	ldrb	r3, [r7, #17]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d00b      	beq.n	8000b4e <MFRC522_ToCard+0x148>
 8000b36:	7d3b      	ldrb	r3, [r7, #20]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	7c7b      	ldrb	r3, [r7, #17]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4a:	801a      	strh	r2, [r3, #0]
 8000b4c:	e005      	b.n	8000b5a <MFRC522_ToCard+0x154>
 8000b4e:	7d3b      	ldrb	r3, [r7, #20]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b58:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000b5a:	7d3b      	ldrb	r3, [r7, #20]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <MFRC522_ToCard+0x15e>
 8000b60:	2301      	movs	r3, #1
 8000b62:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000b64:	7d3b      	ldrb	r3, [r7, #20]
 8000b66:	2b10      	cmp	r3, #16
 8000b68:	d901      	bls.n	8000b6e <MFRC522_ToCard+0x168>
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000b6e:	2300      	movs	r3, #0
 8000b70:	827b      	strh	r3, [r7, #18]
 8000b72:	e00a      	b.n	8000b8a <MFRC522_ToCard+0x184>
 8000b74:	8a7b      	ldrh	r3, [r7, #18]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	18d4      	adds	r4, r2, r3
 8000b7a:	2009      	movs	r0, #9
 8000b7c:	f7ff fe92 	bl	80008a4 <MFRC522_ReadRegister>
 8000b80:	4603      	mov	r3, r0
 8000b82:	7023      	strb	r3, [r4, #0]
 8000b84:	8a7b      	ldrh	r3, [r7, #18]
 8000b86:	3301      	adds	r3, #1
 8000b88:	827b      	strh	r3, [r7, #18]
 8000b8a:	7d3b      	ldrb	r3, [r7, #20]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	8a7a      	ldrh	r2, [r7, #18]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d3ef      	bcc.n	8000b74 <MFRC522_ToCard+0x16e>
 8000b94:	e001      	b.n	8000b9a <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000b96:	2302      	movs	r3, #2
 8000b98:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	371c      	adds	r7, #28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}

08000ba4 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	200d      	movs	r0, #13
 8000bb4:	f7ff fe5e 	bl	8000874 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2293      	movs	r2, #147	; 0x93
 8000bbc:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000bc6:	f107 030a 	add.w	r3, r7, #10
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2202      	movs	r2, #2
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	200c      	movs	r0, #12
 8000bd4:	f7ff ff17 	bl	8000a06 <MFRC522_ToCard>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d118      	bne.n	8000c14 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8000be2:	2300      	movs	r3, #0
 8000be4:	73bb      	strb	r3, [r7, #14]
 8000be6:	e009      	b.n	8000bfc <MFRC522_Anticoll+0x58>
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	7b7b      	ldrb	r3, [r7, #13]
 8000bf2:	4053      	eors	r3, r2
 8000bf4:	737b      	strb	r3, [r7, #13]
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	73bb      	strb	r3, [r7, #14]
 8000bfc:	7bbb      	ldrb	r3, [r7, #14]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d9f2      	bls.n	8000be8 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	7b7a      	ldrb	r2, [r7, #13]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d001      	beq.n	8000c14 <MFRC522_Anticoll+0x70>
 8000c10:	2302      	movs	r3, #2
 8000c12:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8000c1e:	b590      	push	{r4, r7, lr}
 8000c20:	b087      	sub	sp, #28
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	460b      	mov	r3, r1
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f7ff fea6 	bl	8000980 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	200a      	movs	r0, #10
 8000c38:	f7ff fe88 	bl	800094c <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	75fb      	strb	r3, [r7, #23]
 8000c40:	e00a      	b.n	8000c58 <MFRC522_CalculateCRC+0x3a>
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	2009      	movs	r0, #9
 8000c4e:	f7ff fe11 	bl	8000874 <MFRC522_WriteRegister>
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
 8000c54:	3301      	adds	r3, #1
 8000c56:	75fb      	strb	r3, [r7, #23]
 8000c58:	7dfa      	ldrb	r2, [r7, #23]
 8000c5a:	7afb      	ldrb	r3, [r7, #11]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d3f0      	bcc.n	8000c42 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000c60:	2103      	movs	r1, #3
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff fe06 	bl	8000874 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8000c68:	23ff      	movs	r3, #255	; 0xff
 8000c6a:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8000c6c:	2005      	movs	r0, #5
 8000c6e:	f7ff fe19 	bl	80008a4 <MFRC522_ReadRegister>
 8000c72:	4603      	mov	r3, r0
 8000c74:	75bb      	strb	r3, [r7, #22]
		i--;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <MFRC522_CalculateCRC+0x6e>
 8000c82:	7dbb      	ldrb	r3, [r7, #22]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0ef      	beq.n	8000c6c <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8000c8c:	2022      	movs	r0, #34	; 0x22
 8000c8e:	f7ff fe09 	bl	80008a4 <MFRC522_ReadRegister>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	1c5c      	adds	r4, r3, #1
 8000c9e:	2021      	movs	r0, #33	; 0x21
 8000ca0:	f7ff fe00 	bl	80008a4 <MFRC522_ReadRegister>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	7023      	strb	r3, [r4, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd90      	pop	{r4, r7, pc}

08000cb0 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000cb4:	f000 f820 	bl	8000cf8 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000cb8:	218d      	movs	r1, #141	; 0x8d
 8000cba:	202a      	movs	r0, #42	; 0x2a
 8000cbc:	f7ff fdda 	bl	8000874 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000cc0:	213e      	movs	r1, #62	; 0x3e
 8000cc2:	202b      	movs	r0, #43	; 0x2b
 8000cc4:	f7ff fdd6 	bl	8000874 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000cc8:	211e      	movs	r1, #30
 8000cca:	202d      	movs	r0, #45	; 0x2d
 8000ccc:	f7ff fdd2 	bl	8000874 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	202c      	movs	r0, #44	; 0x2c
 8000cd4:	f7ff fdce 	bl	8000874 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8000cd8:	2170      	movs	r1, #112	; 0x70
 8000cda:	2026      	movs	r0, #38	; 0x26
 8000cdc:	f7ff fdca 	bl	8000874 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000ce0:	2140      	movs	r1, #64	; 0x40
 8000ce2:	2015      	movs	r0, #21
 8000ce4:	f7ff fdc6 	bl	8000874 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000ce8:	213d      	movs	r1, #61	; 0x3d
 8000cea:	2011      	movs	r0, #17
 8000cec:	f7ff fdc2 	bl	8000874 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8000cf0:	f000 f80a 	bl	8000d08 <MFRC522_AntennaOn>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff fdb8 	bl	8000874 <MFRC522_WriteRegister>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000d0e:	2014      	movs	r0, #20
 8000d10:	f7ff fdc8 	bl	80008a4 <MFRC522_ReadRegister>
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d103      	bne.n	8000d2a <MFRC522_AntennaOn+0x22>
 8000d22:	2103      	movs	r1, #3
 8000d24:	2014      	movs	r0, #20
 8000d26:	f7ff fe11 	bl	800094c <MFRC522_SetBitMask>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8000d38:	2350      	movs	r3, #80	; 0x50
 8000d3a:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8000d40:	463b      	mov	r3, r7
 8000d42:	1c9a      	adds	r2, r3, #2
 8000d44:	463b      	mov	r3, r7
 8000d46:	2102      	movs	r1, #2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff68 	bl	8000c1e <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000d4e:	463a      	mov	r2, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	4613      	mov	r3, r2
 8000d58:	2204      	movs	r2, #4
 8000d5a:	200c      	movs	r0, #12
 8000d5c:	f7ff fe53 	bl	8000a06 <MFRC522_ToCard>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a28      	ldr	r2, [pc, #160]	; (8000e78 <HAL_SPI_MspInit+0xc0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d14a      	bne.n	8000e70 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a18      	ldr	r2, [pc, #96]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_SPI_MspInit+0xc4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <HAL_SPI_MspInit+0xc8>)
 8000e4a:	f000 f9ff 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e60:	2305      	movs	r3, #5
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <HAL_SPI_MspInit+0xcc>)
 8000e6c:	f000 f9ee 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40003800 	.word	0x40003800
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f890 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f001 fa45 	bl	80023bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fad3 	bl	80004dc <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f44:	0800244c 	.word	0x0800244c
  ldr r2, =_sbss
 8000f48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f4c:	20000094 	.word	0x20000094

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f931 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	200f      	movs	r0, #15
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff feee 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f93b 	bl	8001232 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f911 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000010 	.word	0x20000010
 8000ff4:	2000000c 	.word	0x2000000c

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000010 	.word	0x20000010
 800101c:	20000090 	.word	0x20000090

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000090 	.word	0x20000090

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000010 	.word	0x20000010

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff47 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff5c 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffb0 	bl	80011a0 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e159      	b.n	800151c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8148 	bne.w	8001516 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80a2 	beq.w	8001516 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a56      	ldr	r2, [pc, #344]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b54      	ldr	r3, [pc, #336]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_GPIO_Init+0x2ec>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a49      	ldr	r2, [pc, #292]	; (800153c <HAL_GPIO_Init+0x2f0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x202>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a48      	ldr	r2, [pc, #288]	; (8001540 <HAL_GPIO_Init+0x2f4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x1fe>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a47      	ldr	r2, [pc, #284]	; (8001544 <HAL_GPIO_Init+0x2f8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x1fa>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a46      	ldr	r2, [pc, #280]	; (8001548 <HAL_GPIO_Init+0x2fc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x1f6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a45      	ldr	r2, [pc, #276]	; (800154c <HAL_GPIO_Init+0x300>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x1f2>
 800143a:	2304      	movs	r3, #4
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800143e:	2307      	movs	r3, #7
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x204>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x204>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	; (8001538 <HAL_GPIO_Init+0x2ec>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001492:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_GPIO_Init+0x304>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014bc:	4a24      	ldr	r2, [pc, #144]	; (8001550 <HAL_GPIO_Init+0x304>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_GPIO_Init+0x304>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_GPIO_Init+0x304>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_GPIO_Init+0x304>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f aea2 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40013c00 	.word	0x40013c00

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001570:	e003      	b.n	800157a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	619a      	str	r2, [r3, #24]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e267      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d075      	beq.n	8001692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a6:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d00c      	beq.n	80015cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b2:	4b85      	ldr	r3, [pc, #532]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d112      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015be:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ca:	d10b      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	4b7e      	ldr	r3, [pc, #504]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d05b      	beq.n	8001690 <HAL_RCC_OscConfig+0x108>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d157      	bne.n	8001690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e242      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d106      	bne.n	80015fc <HAL_RCC_OscConfig+0x74>
 80015ee:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a75      	ldr	r2, [pc, #468]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e01d      	b.n	8001638 <HAL_RCC_OscConfig+0xb0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x98>
 8001606:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6f      	ldr	r2, [pc, #444]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b6d      	ldr	r3, [pc, #436]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a6c      	ldr	r2, [pc, #432]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0xb0>
 8001620:	4b69      	ldr	r3, [pc, #420]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a68      	ldr	r2, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a65      	ldr	r2, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d013      	beq.n	8001668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fcee 	bl	8001020 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fcea 	bl	8001020 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e207      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0xc0>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fcda 	bl	8001020 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fcd6 	bl	8001020 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1f3      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	4b51      	ldr	r3, [pc, #324]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0xe8>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d063      	beq.n	8001766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169e:	4b4a      	ldr	r3, [pc, #296]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016aa:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d11c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b6:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d116      	bne.n	80016f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x152>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e1c7      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4937      	ldr	r1, [pc, #220]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	e03a      	b.n	8001766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <HAL_RCC_OscConfig+0x244>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fc8f 	bl	8001020 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fc8b 	bl	8001020 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1a8      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4925      	ldr	r1, [pc, #148]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 8001734:	4313      	orrs	r3, r2
 8001736:	600b      	str	r3, [r1, #0]
 8001738:	e015      	b.n	8001766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0x244>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fc6e 	bl	8001020 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff fc6a 	bl	8001020 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e187      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d036      	beq.n	80017e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d016      	beq.n	80017a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x248>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fc4e 	bl	8001020 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff fc4a 	bl	8001020 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e167      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x240>)
 800179c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x200>
 80017a6:	e01b      	b.n	80017e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_OscConfig+0x248>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fc37 	bl	8001020 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	e00e      	b.n	80017d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fc33 	bl	8001020 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d907      	bls.n	80017d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e150      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	42470000 	.word	0x42470000
 80017d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ea      	bne.n	80017b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 8097 	beq.w	800191c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4b81      	ldr	r3, [pc, #516]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10f      	bne.n	800181e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b7d      	ldr	r3, [pc, #500]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a7c      	ldr	r2, [pc, #496]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	4b77      	ldr	r3, [pc, #476]	; (80019fc <HAL_RCC_OscConfig+0x474>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	4b74      	ldr	r3, [pc, #464]	; (80019fc <HAL_RCC_OscConfig+0x474>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a73      	ldr	r2, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x474>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7ff fbf3 	bl	8001020 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7ff fbef 	bl	8001020 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e10c      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x474>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x2ea>
 8001864:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	4a63      	ldr	r2, [pc, #396]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6713      	str	r3, [r2, #112]	; 0x70
 8001870:	e01c      	b.n	80018ac <HAL_RCC_OscConfig+0x324>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x30c>
 800187a:	4b5f      	ldr	r3, [pc, #380]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a5e      	ldr	r2, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a5b      	ldr	r2, [pc, #364]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0x324>
 8001894:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	4b55      	ldr	r3, [pc, #340]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a54      	ldr	r2, [pc, #336]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 0304 	bic.w	r3, r3, #4
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d015      	beq.n	80018e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fbb4 	bl	8001020 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018bc:	f7ff fbb0 	bl	8001020 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0cb      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d2:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0ee      	beq.n	80018bc <HAL_RCC_OscConfig+0x334>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff fb9e 	bl	8001020 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff fb9a 	bl	8001020 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e0b5      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fe:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ee      	bne.n	80018e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	4a38      	ldr	r2, [pc, #224]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a1 	beq.w	8001a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b08      	cmp	r3, #8
 8001930:	d05c      	beq.n	80019ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d141      	bne.n	80019be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_RCC_OscConfig+0x478>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fb6e 	bl	8001020 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fb6a 	bl	8001020 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e087      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	085b      	lsrs	r3, r3, #1
 800197e:	3b01      	subs	r3, #1
 8001980:	041b      	lsls	r3, r3, #16
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	491b      	ldr	r1, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x478>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fb43 	bl	8001020 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff fb3f 	bl	8001020 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e05c      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x416>
 80019bc:	e054      	b.n	8001a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_RCC_OscConfig+0x478>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb2c 	bl	8001020 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fb28 	bl	8001020 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e045      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_RCC_OscConfig+0x470>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x444>
 80019ea:	e03d      	b.n	8001a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e038      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000
 8001a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_RCC_OscConfig+0x4ec>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d028      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d121      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d11a      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d111      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800

08001a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0cc      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d90c      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	494d      	ldr	r1, [pc, #308]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d044      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d119      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e07f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e067      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4934      	ldr	r1, [pc, #208]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff fa5a 	bl	8001020 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff fa56 	bl	8001020 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e04f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d20c      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e032      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4916      	ldr	r1, [pc, #88]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfe:	f000 f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	490a      	ldr	r1, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	5ccb      	ldrb	r3, [r1, r3]
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f9ba 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00
 8001c34:	40023800 	.word	0x40023800
 8001c38:	0800242c 	.word	0x0800242c
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c48:	b090      	sub	sp, #64	; 0x40
 8001c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c50:	2300      	movs	r3, #0
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c54:	2300      	movs	r3, #0
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d00d      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x40>
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	f200 80a1 	bhi.w	8001db0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x34>
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c76:	e09b      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c7c:	e09b      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7e:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c82:	e098      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c84:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d028      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9a:	4b4a      	ldr	r3, [pc, #296]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	623b      	str	r3, [r7, #32]
 8001ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cac:	2100      	movs	r1, #0
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb0:	fb03 f201 	mul.w	r2, r3, r1
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	fb00 f303 	mul.w	r3, r0, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a43      	ldr	r2, [pc, #268]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8001cbe:	fba0 1202 	umull	r1, r2, r0, r2
 8001cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cca:	4413      	add	r3, r2
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	61fa      	str	r2, [r7, #28]
 8001cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cde:	f7fe fa7b 	bl	80001d8 <__aeabi_uldivmod>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cea:	e053      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	617a      	str	r2, [r7, #20]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cfe:	f04f 0b00 	mov.w	fp, #0
 8001d02:	4652      	mov	r2, sl
 8001d04:	465b      	mov	r3, fp
 8001d06:	f04f 0000 	mov.w	r0, #0
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	0159      	lsls	r1, r3, #5
 8001d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d14:	0150      	lsls	r0, r2, #5
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	ebb2 080a 	subs.w	r8, r2, sl
 8001d1e:	eb63 090b 	sbc.w	r9, r3, fp
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d36:	ebb2 0408 	subs.w	r4, r2, r8
 8001d3a:	eb63 0509 	sbc.w	r5, r3, r9
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	00eb      	lsls	r3, r5, #3
 8001d48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4c:	00e2      	lsls	r2, r4, #3
 8001d4e:	4614      	mov	r4, r2
 8001d50:	461d      	mov	r5, r3
 8001d52:	eb14 030a 	adds.w	r3, r4, sl
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	eb45 030b 	adc.w	r3, r5, fp
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	028b      	lsls	r3, r1, #10
 8001d6e:	4621      	mov	r1, r4
 8001d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d74:	4621      	mov	r1, r4
 8001d76:	028a      	lsls	r2, r1, #10
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	60fa      	str	r2, [r7, #12]
 8001d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d88:	f7fe fa26 	bl	80001d8 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4613      	mov	r3, r2
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3740      	adds	r7, #64	; 0x40
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	00f42400 	.word	0x00f42400
 8001dcc:	017d7840 	.word	0x017d7840

08001dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07b      	b.n	8001eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001df2:	d009      	beq.n	8001e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
 8001dfa:	e005      	b.n	8001e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe ffc8 	bl	8000db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	ea42 0103 	orr.w	r1, r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0104 	and.w	r1, r3, #4
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f003 0210 	and.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b08c      	sub	sp, #48	; 0x30
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x26>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e18a      	b.n	800221e <HAL_SPI_TransmitReceive+0x33c>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f10:	f7ff f886 	bl	8001020 <HAL_GetTick>
 8001f14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d00f      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x70>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f38:	d107      	bne.n	8001f4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <HAL_SPI_TransmitReceive+0x68>
 8001f42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d003      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f50:	e15b      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x82>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x82>
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f6a:	e14e      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d003      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2205      	movs	r2, #5
 8001f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	887a      	ldrh	r2, [r7, #2]
 8001fa2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d007      	beq.n	8001fd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fdc:	d178      	bne.n	80020d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_SPI_TransmitReceive+0x10a>
 8001fe6:	8b7b      	ldrh	r3, [r7, #26]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d166      	bne.n	80020ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002010:	e053      	b.n	80020ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d11b      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x176>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <HAL_SPI_TransmitReceive+0x176>
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d113      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	1c9a      	adds	r2, r3, #2
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d119      	bne.n	800209a <HAL_SPI_TransmitReceive+0x1b8>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d014      	beq.n	800209a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	b292      	uxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	1c9a      	adds	r2, r3, #2
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002096:	2301      	movs	r3, #1
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800209a:	f7fe ffc1 	bl	8001020 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d807      	bhi.n	80020ba <HAL_SPI_TransmitReceive+0x1d8>
 80020aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d003      	beq.n	80020ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020b8:	e0a7      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1a6      	bne.n	8002012 <HAL_SPI_TransmitReceive+0x130>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1a1      	bne.n	8002012 <HAL_SPI_TransmitReceive+0x130>
 80020ce:	e07c      	b.n	80021ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_SPI_TransmitReceive+0x1fc>
 80020d8:	8b7b      	ldrh	r3, [r7, #26]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d16b      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	330c      	adds	r3, #12
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002104:	e057      	b.n	80021b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d11c      	bne.n	800214e <HAL_SPI_TransmitReceive+0x26c>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d017      	beq.n	800214e <HAL_SPI_TransmitReceive+0x26c>
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d114      	bne.n	800214e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	7812      	ldrb	r2, [r2, #0]
 8002130:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d119      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x2ae>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d014      	beq.n	8002190 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800218c:	2301      	movs	r3, #1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002190:	f7fe ff46 	bl	8001020 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800219c:	429a      	cmp	r2, r3
 800219e:	d803      	bhi.n	80021a8 <HAL_SPI_TransmitReceive+0x2c6>
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d102      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x2cc>
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021b4:	e029      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1a2      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x224>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d19d      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f8b2 	bl	8002338 <SPI_EndRxTxTransaction>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80021e6:	e010      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	e000      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002208:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800221a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800221e:	4618      	mov	r0, r3
 8002220:	3730      	adds	r7, #48	; 0x30
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002238:	f7fe fef2 	bl	8001020 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4413      	add	r3, r2
 8002246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002248:	f7fe feea 	bl	8001020 <HAL_GetTick>
 800224c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	0d1b      	lsrs	r3, r3, #20
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800225e:	e054      	b.n	800230a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d050      	beq.n	800230a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002268:	f7fe feda 	bl	8001020 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	429a      	cmp	r2, r3
 8002276:	d902      	bls.n	800227e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d13d      	bne.n	80022fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800228c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002296:	d111      	bne.n	80022bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a0:	d004      	beq.n	80022ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022aa:	d107      	bne.n	80022bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c4:	d10f      	bne.n	80022e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e017      	b.n	800232a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3b01      	subs	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	429a      	cmp	r2, r3
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	429a      	cmp	r2, r3
 8002326:	d19b      	bne.n	8002260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008

08002338 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <SPI_EndRxTxTransaction+0x7c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <SPI_EndRxTxTransaction+0x80>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0d5b      	lsrs	r3, r3, #21
 8002350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002362:	d112      	bne.n	800238a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff ff5a 	bl	8002228 <SPI_WaitFlagStateUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d016      	beq.n	80023a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f043 0220 	orr.w	r2, r3, #32
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e00f      	b.n	80023aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3b01      	subs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b80      	cmp	r3, #128	; 0x80
 80023a2:	d0f2      	beq.n	800238a <SPI_EndRxTxTransaction+0x52>
 80023a4:	e000      	b.n	80023a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80023a6:	bf00      	nop
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000008 	.word	0x20000008
 80023b8:	165e9f81 	.word	0x165e9f81

080023bc <__libc_init_array>:
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	4d0d      	ldr	r5, [pc, #52]	; (80023f4 <__libc_init_array+0x38>)
 80023c0:	4c0d      	ldr	r4, [pc, #52]	; (80023f8 <__libc_init_array+0x3c>)
 80023c2:	1b64      	subs	r4, r4, r5
 80023c4:	10a4      	asrs	r4, r4, #2
 80023c6:	2600      	movs	r6, #0
 80023c8:	42a6      	cmp	r6, r4
 80023ca:	d109      	bne.n	80023e0 <__libc_init_array+0x24>
 80023cc:	4d0b      	ldr	r5, [pc, #44]	; (80023fc <__libc_init_array+0x40>)
 80023ce:	4c0c      	ldr	r4, [pc, #48]	; (8002400 <__libc_init_array+0x44>)
 80023d0:	f000 f820 	bl	8002414 <_init>
 80023d4:	1b64      	subs	r4, r4, r5
 80023d6:	10a4      	asrs	r4, r4, #2
 80023d8:	2600      	movs	r6, #0
 80023da:	42a6      	cmp	r6, r4
 80023dc:	d105      	bne.n	80023ea <__libc_init_array+0x2e>
 80023de:	bd70      	pop	{r4, r5, r6, pc}
 80023e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e4:	4798      	blx	r3
 80023e6:	3601      	adds	r6, #1
 80023e8:	e7ee      	b.n	80023c8 <__libc_init_array+0xc>
 80023ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ee:	4798      	blx	r3
 80023f0:	3601      	adds	r6, #1
 80023f2:	e7f2      	b.n	80023da <__libc_init_array+0x1e>
 80023f4:	08002444 	.word	0x08002444
 80023f8:	08002444 	.word	0x08002444
 80023fc:	08002444 	.word	0x08002444
 8002400:	08002448 	.word	0x08002448

08002404 <memset>:
 8002404:	4402      	add	r2, r0
 8002406:	4603      	mov	r3, r0
 8002408:	4293      	cmp	r3, r2
 800240a:	d100      	bne.n	800240e <memset+0xa>
 800240c:	4770      	bx	lr
 800240e:	f803 1b01 	strb.w	r1, [r3], #1
 8002412:	e7f9      	b.n	8002408 <memset+0x4>

08002414 <_init>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	bf00      	nop
 8002418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241a:	bc08      	pop	{r3}
 800241c:	469e      	mov	lr, r3
 800241e:	4770      	bx	lr

08002420 <_fini>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	bf00      	nop
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr
